{"ast":null,"code":"import _slicedToArray from \"C:/NewPrac/Prac/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from '../useUtils';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions } from './useField.utils';\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\n\nvar QUERY_LIFE_DURATION_MS = 5000;\nvar isQueryResponseWithoutValue = function isQueryResponseWithoutValue(response) {\n  return response.saveQuery != null;\n};\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport var useFieldCharacterEditing = function useFieldCharacterEditing(_ref) {\n  var sections = _ref.sections,\n    updateSectionValue = _ref.updateSectionValue,\n    sectionsValueBoundaries = _ref.sectionsValueBoundaries,\n    setTempAndroidValueStr = _ref.setTempAndroidValueStr,\n    timezone = _ref.timezone;\n  var utils = useUtils();\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    query = _React$useState2[0],\n    setQuery = _React$useState2[1];\n  var resetQuery = useEventCallback(function () {\n    return setQuery(null);\n  });\n  React.useEffect(function () {\n    var _sections$query$secti;\n    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(function () {\n    if (query != null) {\n      var timeout = setTimeout(function () {\n        return resetQuery();\n      }, QUERY_LIFE_DURATION_MS);\n      return function () {\n        window.clearTimeout(timeout);\n      };\n    }\n    return function () {};\n  }, [query, resetQuery]);\n  var applyQuery = function applyQuery(_ref2, getFirstSectionValueMatchingWithQuery, isValidQueryValue) {\n    var keyPressed = _ref2.keyPressed,\n      sectionIndex = _ref2.sectionIndex;\n    var cleanKeyPressed = keyPressed.toLowerCase();\n    var activeSection = sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenated value\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      var concatenatedQueryValue = \"\".concat(query.value).concat(cleanKeyPressed);\n      var _queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(_queryResponse)) {\n        setQuery({\n          sectionIndex: sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return _queryResponse;\n      }\n    }\n    var queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n    setQuery({\n      sectionIndex: sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  var applyLetterEditing = function applyLetterEditing(params) {\n    var findMatchingOptions = function findMatchingOptions(format, options, queryValue) {\n      var matchingValues = options.filter(function (option) {\n        return option.toLowerCase().startsWith(queryValue);\n      });\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    var testQueryOnFormatAndFallbackFormat = function testQueryOnFormatAndFallbackFormat(queryValue, activeSection, fallbackFormat, formatFallbackValue) {\n      var getOptions = function getOptions(format) {\n        return getLetterEditingOptions(utils, timezone, activeSection.type, format);\n      };\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        var fallbackOptions = getOptions(fallbackFormat);\n        var response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    var getFirstSectionValueMatchingWithQuery = function getFirstSectionValueMatchingWithQuery(queryValue, activeSection) {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            var formatFallbackValue = function formatFallbackValue(fallbackValue) {\n              return changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            };\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            var _formatFallbackValue = function _formatFallbackValue(fallbackValue, fallbackOptions) {\n              return fallbackOptions.indexOf(fallbackValue).toString();\n            };\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, _formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  var applyNumericEditing = function applyNumericEditing(params) {\n    var getNewSectionValue = function getNewSectionValue(queryValue, section) {\n      var queryValueNumber = Number(\"\".concat(queryValue));\n      var sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      var shouldGoToNextSection = Number(\"\".concat(queryValue, \"0\")) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;\n      var newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection: shouldGoToNextSection\n      };\n    };\n    var getFirstSectionValueMatchingWithQuery = function getFirstSectionValueMatchingWithQuery(queryValue, activeSection) {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue(queryValue, activeSection);\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        var hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');\n        var response = getNewSectionValue(queryValue, {\n          type: activeSection.type,\n          format: 'MM',\n          hasLeadingZerosInFormat: hasLeadingZerosInFormat,\n          hasLeadingZerosInInput: true,\n          contentType: 'digit',\n          maxLength: 2\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        var formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        var _response = getNewSectionValue(queryValue, activeSection);\n        if (isQueryResponseWithoutValue(_response)) {\n          return _response;\n        }\n        var _formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(_response.sectionValue) - 1];\n        return _extends({}, _response, {\n          sectionValue: _formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, function (queryValue) {\n      return !Number.isNaN(Number(queryValue));\n    });\n  };\n  var applyCharacterEditing = useEventCallback(function (params) {\n    var activeSection = sections[params.sectionIndex];\n    var isNumericEditing = !Number.isNaN(Number(params.keyPressed));\n    var response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n    } else {\n      updateSectionValue({\n        activeSection: activeSection,\n        newSectionValue: response.sectionValue,\n        shouldGoToNextSection: response.shouldGoToNextSection\n      });\n    }\n  });\n  return {\n    applyCharacterEditing: applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useUtils","changeSectionValueFormat","cleanDigitSectionValue","doesSectionFormatHaveLeadingZeros","getDateSectionConfigFromFormatToken","getDaysInWeekStr","getLetterEditingOptions","QUERY_LIFE_DURATION_MS","isQueryResponseWithoutValue","response","saveQuery","useFieldCharacterEditing","_ref","sections","updateSectionValue","sectionsValueBoundaries","setTempAndroidValueStr","timezone","utils","_React$useState","useState","_React$useState2","_slicedToArray","query","setQuery","resetQuery","useEffect","_sections$query$secti","sectionIndex","type","sectionType","timeout","setTimeout","window","clearTimeout","applyQuery","_ref2","getFirstSectionValueMatchingWithQuery","isValidQueryValue","keyPressed","cleanKeyPressed","toLowerCase","activeSection","value","concatenatedQueryValue","concat","queryResponse","applyLetterEditing","params","findMatchingOptions","format","options","queryValue","matchingValues","filter","option","startsWith","length","sectionValue","shouldGoToNextSection","testQueryOnFormatAndFallbackFormat","fallbackFormat","formatFallbackValue","getOptions","contentType","fallbackOptions","fallbackValue","formats","month","indexOf","toString","weekday","applyNumericEditing","getNewSectionValue","section","queryValueNumber","Number","sectionBoundaries","currentDate","maximum","minimum","newSectionValue","hasLeadingZerosInFormat","hasLeadingZerosInInput","maxLength","formattedValue","isNaN","applyCharacterEditing","isNumericEditing","resetCharacterQuery"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from '../useUtils';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions } from './useField.utils';\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\n\nconst QUERY_LIFE_DURATION_MS = 5000;\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = ({\n  sections,\n  updateSectionValue,\n  sectionsValueBoundaries,\n  setTempAndroidValueStr,\n  timezone\n}) => {\n  const utils = useUtils();\n  const [query, setQuery] = React.useState(null);\n  const resetQuery = useEventCallback(() => setQuery(null));\n  React.useEffect(() => {\n    var _sections$query$secti;\n    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(() => {\n    if (query != null) {\n      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);\n      return () => {\n        window.clearTimeout(timeout);\n      };\n    }\n    return () => {};\n  }, [query, resetQuery]);\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenated value\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n    setQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = (queryValue, section) => {\n      const queryValueNumber = Number(`${queryValue}`);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue(queryValue, activeSection);\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');\n        const response = getNewSectionValue(queryValue, {\n          type: activeSection.type,\n          format: 'MM',\n          hasLeadingZerosInFormat,\n          hasLeadingZerosInInput: true,\n          contentType: 'digit',\n          maxLength: 2\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue(queryValue, activeSection);\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => !Number.isNaN(Number(queryValue)));\n  };\n  const applyCharacterEditing = useEventCallback(params => {\n    const activeSection = sections[params.sectionIndex];\n    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));\n    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n    } else {\n      updateSectionValue({\n        activeSection,\n        newSectionValue: response.sectionValue,\n        shouldGoToNextSection: response.shouldGoToNextSection\n      });\n    }\n  });\n  return {\n    applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}