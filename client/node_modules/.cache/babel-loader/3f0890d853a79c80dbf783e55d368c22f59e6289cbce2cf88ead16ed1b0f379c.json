{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nconst useSignup = () => {\n  _s();\n  const [iserror, setError] = useState(null);\n  const [isloading, setLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthContext();\n  const location = useNavigate();\n  const signups = async ({\n    Email,\n    Password,\n    action,\n    Name,\n    PhoneNumber,\n    types\n  }) => {\n    setError(null);\n    setLoading(true);\n    const Fetch = await fetch(`http://localhost:4000/${action}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        Email,\n        Password,\n        Name,\n        PhoneNumber,\n        types\n      })\n    });\n    const JsonData = await Fetch.json();\n    if (!Fetch.ok) {\n      // Handle the Error because if the user is not available\n      setLoading(true);\n      setError(JsonData.Error);\n      toast.error(JsonData.Error);\n      return;\n    } else {\n      // Save the user to localStorage for authentication purpose\n      setLoading(false);\n      localStorage.setItem('User', JSON.stringify(JsonData));\n      dispatch({\n        type: \"Login\",\n        payload: JsonData\n      });\n      toast.success(\"Successfully Loggedin\");\n      location(`/${types === \"user\" ? \"home\" : \"ownerhome\"}`);\n      return;\n    }\n  };\n  return {\n    signups,\n    isloading,\n    iserror\n  };\n};\n_s(useSignup, \"ZPTRdQ9Nh9r7xx290k7cT/vvn3A=\", false, function () {\n  return [useAuthContext, useNavigate];\n});\nexport default useSignup;","map":{"version":3,"names":["useState","useAuthContext","useNavigate","toast","useSignup","_s","iserror","setError","isloading","setLoading","dispatch","location","signups","Email","Password","action","Name","PhoneNumber","types","Fetch","fetch","method","headers","body","JSON","stringify","JsonData","json","ok","Error","error","localStorage","setItem","type","payload","success"],"sources":["C:/NewPrac/Prac/client/src/hooks/useSignup.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useAuthContext } from './useAuthContext';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { toast } from 'react-toastify';\r\nconst useSignup = () => {\r\n    const [iserror, setError] = useState(null);\r\n    const [isloading, setLoading] = useState(null);\r\n    const { dispatch } = useAuthContext();\r\n    const location = useNavigate();\r\n    const signups = async ({ Email, Password, action, Name, PhoneNumber, types }) => {\r\n        setError(null);\r\n        setLoading(true);\r\n        const Fetch = await fetch(`http://localhost:4000/${action}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\" \r\n            },\r\n            body: JSON.stringify({ Email, Password, Name, PhoneNumber, types })\r\n        });\r\n\r\n        const JsonData = await Fetch.json();\r\n        if (!Fetch.ok) {\r\n            // Handle the Error because if the user is not available\r\n            setLoading(true);\r\n            setError(JsonData.Error);\r\n            toast.error(JsonData.Error);\r\n            return;\r\n        } else {\r\n            // Save the user to localStorage for authentication purpose\r\n            setLoading(false);\r\n            localStorage.setItem('User', JSON.stringify(JsonData));\r\n            dispatch({ type: \"Login\", payload: JsonData });\r\n            toast.success(\"Successfully Loggedin\")\r\n            location(`/${types===\"user\"?\"home\":\"ownerhome\"}`);\r\n            return\r\n        }\r\n    }\r\n    return { signups, isloading, iserror };\r\n}\r\n\r\nexport default useSignup;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,SAAS,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM;IAAEU;EAAS,CAAC,GAAGT,cAAc,CAAC,CAAC;EACrC,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,OAAO,GAAG,MAAAA,CAAO;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,MAAM;IAAEC,IAAI;IAAEC,WAAW;IAAEC;EAAM,CAAC,KAAK;IAC7EX,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMU,KAAK,GAAG,MAAMC,KAAK,CAAE,yBAAwBL,MAAO,EAAC,EAAE;MACzDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEZ,KAAK;QAAEC,QAAQ;QAAEE,IAAI;QAAEC,WAAW;QAAEC;MAAM,CAAC;IACtE,CAAC,CAAC;IAEF,MAAMQ,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,CAAC;IACnC,IAAI,CAACR,KAAK,CAACS,EAAE,EAAE;MACX;MACAnB,UAAU,CAAC,IAAI,CAAC;MAChBF,QAAQ,CAACmB,QAAQ,CAACG,KAAK,CAAC;MACxB1B,KAAK,CAAC2B,KAAK,CAACJ,QAAQ,CAACG,KAAK,CAAC;MAC3B;IACJ,CAAC,MAAM;MACH;MACApB,UAAU,CAAC,KAAK,CAAC;MACjBsB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAER,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;MACtDhB,QAAQ,CAAC;QAAEuB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAER;MAAS,CAAC,CAAC;MAC9CvB,KAAK,CAACgC,OAAO,CAAC,uBAAuB,CAAC;MACtCxB,QAAQ,CAAE,IAAGO,KAAK,KAAG,MAAM,GAAC,MAAM,GAAC,WAAY,EAAC,CAAC;MACjD;IACJ;EACJ,CAAC;EACD,OAAO;IAAEN,OAAO;IAAEJ,SAAS;IAAEF;EAAQ,CAAC;AAC1C,CAAC;AAAAD,EAAA,CAlCKD,SAAS;EAAA,QAGUH,cAAc,EAClBC,WAAW;AAAA;AAgChC,eAAeE,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}