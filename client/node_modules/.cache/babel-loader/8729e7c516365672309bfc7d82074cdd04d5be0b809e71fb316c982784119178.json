{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { extractValidationProps } from '@mui/x-date-pickers/internals';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { rangeValueManager } from '../internals/utils/valueManagers';\nimport { useDateRangePickerDefaultizedProps } from '../DateRangePicker/shared';\nimport { renderDateRangeViewCalendar } from '../dateRangeViewRenderers';\nimport { MultiInputDateRangeField } from '../MultiInputDateRangeField';\nimport { useMobileRangePicker } from '../internals/hooks/useMobileRangePicker';\nimport { validateDateRange } from '../internals/utils/validation/validateDateRange';\nconst MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  var _defaultizedProps$slo2;\n  // Props with the default values common to all date time pickers\n  const defaultizedProps = useDateRangePickerDefaultizedProps(inProps, 'MuiMobileDateRangePicker');\n  const viewRenderers = _extends({\n    day: renderDateRangeViewCalendar\n  }, defaultizedProps.viewRenderers);\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    calendars: 1,\n    views: ['day'],\n    openTo: 'day',\n    slots: _extends({\n      field: MultiInputDateRangeField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: false\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useMobileRangePicker({\n    props,\n    valueManager: rangeValueManager,\n    valueType: 'date',\n    validator: validateDateRange\n  });\n  return renderPicker();\n});\nMobileDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value={[null, null]}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n};\nexport { MobileDateRangePicker };","map":{"version":3,"names":["_extends","React","PropTypes","extractValidationProps","resolveComponentProps","refType","rangeValueManager","useDateRangePickerDefaultizedProps","renderDateRangeViewCalendar","MultiInputDateRangeField","useMobileRangePicker","validateDateRange","MobileDateRangePicker","forwardRef","inProps","ref","_defaultizedProps$slo2","defaultizedProps","viewRenderers","day","props","calendars","views","openTo","slots","field","slotProps","ownerState","_defaultizedProps$slo","toolbar","hidden","renderPicker","valueManager","valueType","validator","propTypes","autoFocus","bool","oneOf","className","string","closeOnSelect","components","object","componentsProps","currentMonthCalendarPosition","dayOfWeekFormatter","func","defaultCalendarMonth","any","defaultRangePosition","defaultValue","arrayOf","disableAutoMonthSwitching","disabled","disableDragEditing","disableFuture","disableHighlightToday","disableOpenPicker","disablePast","displayWeekNumber","fixedWeekNumber","number","format","formatDensity","inputRef","label","node","loading","localeText","maxDate","minDate","onAccept","onChange","onClose","onError","onMonthChange","onOpen","onRangePositionChange","onSelectedSectionsChange","open","rangePosition","readOnly","reduceAnimations","referenceDate","renderLoading","selectedSections","oneOfType","shape","endIndex","isRequired","startIndex","shouldDisableDate","showDaysOutsideCurrentMonth","sx","timezone","value"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers-pro/MobileDateRangePicker/MobileDateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { extractValidationProps } from '@mui/x-date-pickers/internals';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { rangeValueManager } from '../internals/utils/valueManagers';\nimport { useDateRangePickerDefaultizedProps } from '../DateRangePicker/shared';\nimport { renderDateRangeViewCalendar } from '../dateRangeViewRenderers';\nimport { MultiInputDateRangeField } from '../MultiInputDateRangeField';\nimport { useMobileRangePicker } from '../internals/hooks/useMobileRangePicker';\nimport { validateDateRange } from '../internals/utils/validation/validateDateRange';\nconst MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  var _defaultizedProps$slo2;\n  // Props with the default values common to all date time pickers\n  const defaultizedProps = useDateRangePickerDefaultizedProps(inProps, 'MuiMobileDateRangePicker');\n  const viewRenderers = _extends({\n    day: renderDateRangeViewCalendar\n  }, defaultizedProps.viewRenderers);\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    calendars: 1,\n    views: ['day'],\n    openTo: 'day',\n    slots: _extends({\n      field: MultiInputDateRangeField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: false\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useMobileRangePicker({\n    props,\n    valueManager: rangeValueManager,\n    valueType: 'date',\n    validator: validateDateRange\n  });\n  return renderPicker();\n});\nMobileDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value={[null, null]}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n};\nexport { MobileDateRangePicker };"],"mappings":"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,CAAC+C,GAAG,CAAC;EAC9C;AACF;AACA;AACA;EACEI,yBAAyB,EAAEnD,SAAS,CAACmC,IAAI;EACzC;AACF;AACA;AACA;EACEiB,QAAQ,EAAEpD,SAAS,CAACmC,IAAI;EACxB;AACF;AACA;AACA;EACEkB,kBAAkB,EAAErD,SAAS,CAACmC,IAAI;EAClC;AACF;AACA;AACA;EACEmB,aAAa,EAAEtD,SAAS,CAACmC,IAAI;EAC7B;AACF;AACA;AACA;EACEoB,qBAAqB,EAAEvD,SAAS,CAACmC,IAAI;EACrC;AACF;AACA;AACA;EACEqB,iBAAiB,EAAExD,SAAS,CAACmC,IAAI;EACjC;AACF;AACA;AACA;EACEsB,WAAW,EAAEzD,SAAS,CAACmC,IAAI;EAC3B;AACF;AACA;EACEuB,iBAAiB,EAAE1D,SAAS,CAACmC,IAAI;EACjC;AACF;AACA;AACA;AACA;EACEwB,eAAe,EAAE3D,SAAS,CAAC4D,MAAM;EACjC;AACF;AACA;AACA;EACEC,MAAM,EAAE7D,SAAS,CAACsC,MAAM;EACxB;AACF;AACA;AACA;AACA;EACEwB,aAAa,EAAE9D,SAAS,CAACoC,KAAK,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;EACrD;AACF;AACA;AACA;EACE2B,QAAQ,EAAE5D,OAAO;EACjB;AACF;AACA;AACA;EACE6D,KAAK,EAAEhE,SAAS,CAACiE,IAAI;EACrB;AACF;AACA;AACA;AACA;EACEC,OAAO,EAAElE,SAAS,CAACmC,IAAI;EACvB;AACF;AACA;AACA;EACEgC,UAAU,EAAEnE,SAAS,CAACyC,MAAM;EAC5B;AACF;AACA;EACE2B,OAAO,EAAEpE,SAAS,CAAC+C,GAAG;EACtB;AACF;AACA;EACEsB,OAAO,EAAErE,SAAS,CAAC+C,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEuB,QAAQ,EAAEtE,SAAS,CAAC6C,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACE0B,QAAQ,EAAEvE,SAAS,CAAC6C,IAAI;EACxB;AACF;AACA;AACA;EACE2B,OAAO,EAAExE,SAAS,CAAC6C,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4B,OAAO,EAAEzE,SAAS,CAAC6C,IAAI;EACvB;AACF;AACA;AACA;AACA;EACE6B,aAAa,EAAE1E,SAAS,CAAC6C,IAAI;EAC7B;AACF;AACA;AACA;EACE8B,MAAM,EAAE3E,SAAS,CAAC6C,IAAI;EACtB;AACF;AACA;AACA;EACE+B,qBAAqB,EAAE5E,SAAS,CAAC6C,IAAI;EACrC;AACF;AACA;AACA;EACEgC,wBAAwB,EAAE7E,SAAS,CAAC6C,IAAI;EACxC;AACF;AACA;AACA;EACEiC,IAAI,EAAE9E,SAAS,CAACmC,IAAI;EACpB;AACF;AACA;AACA;EACE4C,aAAa,EAAE/E,SAAS,CAACoC,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;EAChD4C,QAAQ,EAAEhF,SAAS,CAACmC,IAAI;EACxB;AACF;AACA;AACA;EACE8C,gBAAgB,EAAEjF,SAAS,CAACmC,IAAI;EAChC;AACF;AACA;AACA;EACE+C,aAAa,EAAElF,SAAS,CAAC+C,GAAG;EAC5B;AACF;AACA;AACA;AACA;EACEoC,aAAa,EAAEnF,SAAS,CAAC6C,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuC,gBAAgB,EAAEpF,SAAS,CAACqF,SAAS,CAAC,CAACrF,SAAS,CAACoC,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,EAAEpC,SAAS,CAAC4D,MAAM,EAAE5D,SAAS,CAACsF,KAAK,CAAC;IAC/KC,QAAQ,EAAEvF,SAAS,CAAC4D,MAAM,CAAC4B,UAAU;IACrCC,UAAU,EAAEzF,SAAS,CAAC4D,MAAM,CAAC4B;EAC/B,CAAC,CAAC,CAAC,CAAC;EACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,iBAAiB,EAAE1F,SAAS,CAAC6C,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE8C,2BAA2B,EAAE3F,SAAS,CAACmC,IAAI;EAC3C;AACF;AACA;AACA;EACEX,SAAS,EAAExB,SAAS,CAACyC,MAAM;EAC3B;AACF;AACA;AACA;EACEnB,KAAK,EAAEtB,SAAS,CAACyC,MAAM;EACvB;AACF;AACA;EACEmD,EAAE,EAAE5F,SAAS,CAACqF,SAAS,CAAC,CAACrF,SAAS,CAACkD,OAAO,CAAClD,SAAS,CAACqF,SAAS,CAAC,CAACrF,SAAS,CAAC6C,IAAI,EAAE7C,SAAS,CAACyC,MAAM,EAAEzC,SAAS,CAACmC,IAAI,CAAC,CAAC,CAAC,EAAEnC,SAAS,CAAC6C,IAAI,EAAE7C,SAAS,CAACyC,MAAM,CAAC,CAAC;EACvJ;AACF;AACA;AACA;AACA;AACA;AACA;EACEoD,QAAQ,EAAE7F,SAAS,CAACsC,MAAM;EAC1B;AACF;AACA;AACA;EACEwD,KAAK,EAAE9F,SAAS,CAACkD,OAAO,CAAClD,SAAS,CAAC+C,GAAG,CAAC;EACvC;AACF;AACA;AACA;AACA;EACE/B,aAAa,EAAEhB,SAAS,CAACsF,KAAK,CAAC;IAC7BrE,GAAG,EAAEjB,SAAS,CAAC6C;EACjB,CAAC;AACH,CAAC;AACD,SAASnC,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}