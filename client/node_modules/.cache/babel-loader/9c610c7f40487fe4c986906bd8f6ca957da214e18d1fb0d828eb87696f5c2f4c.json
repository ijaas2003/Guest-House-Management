{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"value\", \"referenceDate\"];\nimport { areDatesEqual, getTodayDate, replaceInvalidDateByNull } from './date-utils';\nimport { getDefaultReferenceDate } from './getDefaultReferenceDate';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections } from '../hooks/useField/useField.utils';\nexport var singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: getTodayDate,\n  getInitialReferenceValue: function getInitialReferenceValue(_ref) {\n    var value = _ref.value,\n      referenceDate = _ref.referenceDate,\n      params = _objectWithoutPropertiesLoose(_ref, _excluded);\n    if (value != null && params.utils.isValid(value)) {\n      return value;\n    }\n    if (referenceDate != null) {\n      return referenceDate;\n    }\n    return getDefaultReferenceDate(params);\n  },\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: function isSameError(a, b) {\n    return a === b;\n  },\n  hasError: function hasError(error) {\n    return error != null;\n  },\n  defaultErrorState: null,\n  getTimezone: function getTimezone(utils, value) {\n    return value == null || !utils.isValid(value) ? null : utils.getTimezone(value);\n  },\n  setTimezone: function setTimezone(utils, timezone, value) {\n    return value == null ? null : utils.setTimezone(value, timezone);\n  }\n};\nexport var singleItemFieldValueManager = {\n  updateReferenceValue: function updateReferenceValue(utils, value, prevReferenceValue) {\n    return value == null || !utils.isValid(value) ? prevReferenceValue : value;\n  },\n  getSectionsFromValue: function getSectionsFromValue(utils, date, prevSections, isRTL, getSectionsFromDate) {\n    var shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);\n  },\n  getValueStrFromSections: createDateStrForInputFromSections,\n  getActiveDateManager: function getActiveDateManager(utils, state) {\n    return {\n      date: state.value,\n      referenceDate: state.referenceValue,\n      getSections: function getSections(sections) {\n        return sections;\n      },\n      getNewValuesFromNewActiveDate: function getNewValuesFromNewActiveDate(newActiveDate) {\n        return {\n          value: newActiveDate,\n          referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n        };\n      }\n    };\n  },\n  parseValueStr: function parseValueStr(valueStr, referenceValue, parseDate) {\n    return parseDate(valueStr.trim(), referenceValue);\n  }\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_excluded","areDatesEqual","getTodayDate","replaceInvalidDateByNull","getDefaultReferenceDate","addPositionPropertiesToSections","createDateStrForInputFromSections","singleItemValueManager","emptyValue","getTodayValue","getInitialReferenceValue","_ref","value","referenceDate","params","utils","isValid","cleanValue","areValuesEqual","isSameError","a","b","hasError","error","defaultErrorState","getTimezone","setTimezone","timezone","singleItemFieldValueManager","updateReferenceValue","prevReferenceValue","getSectionsFromValue","date","prevSections","isRTL","getSectionsFromDate","shouldReUsePrevDateSections","getValueStrFromSections","getActiveDateManager","state","referenceValue","getSections","sections","getNewValuesFromNewActiveDate","newActiveDate","parseValueStr","valueStr","parseDate","trim"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"value\", \"referenceDate\"];\nimport { areDatesEqual, getTodayDate, replaceInvalidDateByNull } from './date-utils';\nimport { getDefaultReferenceDate } from './getDefaultReferenceDate';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: getTodayDate,\n  getInitialReferenceValue: _ref => {\n    let {\n        value,\n        referenceDate\n      } = _ref,\n      params = _objectWithoutPropertiesLoose(_ref, _excluded);\n    if (value != null && params.utils.isValid(value)) {\n      return value;\n    }\n    if (referenceDate != null) {\n      return referenceDate;\n    }\n    return getDefaultReferenceDate(params);\n  },\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: (a, b) => a === b,\n  hasError: error => error != null,\n  defaultErrorState: null,\n  getTimezone: (utils, value) => value == null || !utils.isValid(value) ? null : utils.getTimezone(value),\n  setTimezone: (utils, timezone, value) => value == null ? null : utils.setTimezone(value, timezone)\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);\n  },\n  getValueStrFromSections: createDateStrForInputFromSections,\n  getActiveDateManager: (utils, state) => ({\n    date: state.value,\n    referenceDate: state.referenceValue,\n    getSections: sections => sections,\n    getNewValuesFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}