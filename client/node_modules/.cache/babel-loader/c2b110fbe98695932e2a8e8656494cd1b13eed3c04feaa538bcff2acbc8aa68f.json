{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nconst useGuestHouse = () => {\n  _s();\n  const [iserror, setError] = useState(null);\n  const [isloading, setLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthContext();\n  const location = useNavigate();\n  const GuestHouse = async ({\n    OwnerEmail,\n    PhoneNumber,\n    action,\n    types\n  }) => {\n    console.log({\n      Email,\n      Password,\n      Name,\n      PhoneNumber,\n      action,\n      types\n    });\n    console.log(action);\n    setError(null);\n    setLoading(true);\n    const Fetch = await fetch(`http://localhost:4000/${action}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        Email,\n        Password,\n        Name,\n        PhoneNumber,\n        types\n      })\n    });\n    const JsonData = await Fetch.json();\n    console.log(JsonData);\n    if (!Fetch.ok) {\n      // Handle the Error because if the user is not available\n      setLoading(false);\n      setError(JsonData.Error);\n      toast.error(iserror);\n    } else {\n      // Save the user to localStorage for authentication purpose\n      setLoading(false);\n      localStorage.setItem('User', JSON.stringify(JsonData));\n      dispatch({\n        type: \"Login\",\n        payload: JsonData\n      });\n      toast.success(\"Successfully Loggedin\");\n      location(`/${types === \"user\" ? \"home\" : \"ownerhome\"}`);\n    }\n  };\n  return {\n    GuestHouse,\n    isloading,\n    iserror\n  };\n};\n_s(useGuestHouse, \"ZPTRdQ9Nh9r7xx290k7cT/vvn3A=\", false, function () {\n  return [useAuthContext, useNavigate];\n});\nexport default useGuestHouse;","map":{"version":3,"names":["useState","useAuthContext","useNavigate","toast","useGuestHouse","_s","iserror","setError","isloading","setLoading","dispatch","location","GuestHouse","OwnerEmail","PhoneNumber","action","types","console","log","Email","Password","Name","Fetch","fetch","method","headers","body","JSON","stringify","JsonData","json","ok","Error","error","localStorage","setItem","type","payload","success"],"sources":["C:/NewPrac/Prac/client/src/hooks/useGuestHouse.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useAuthContext } from './useAuthContext';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { toast } from 'react-toastify';\r\nconst useGuestHouse = () => {\r\n    const [iserror, setError] = useState(null);\r\n    const [isloading, setLoading] = useState(null);\r\n    const { dispatch } = useAuthContext();\r\n    const location = useNavigate();\r\n\r\n    const GuestHouse = async ({ OwnerEmail, PhoneNumber, action, types }) => {\r\n        console.log({ Email, Password, Name, PhoneNumber, action, types });\r\n        console.log(action);\r\n        setError(null);\r\n        setLoading(true);\r\n        const Fetch = await fetch(`http://localhost:4000/${action}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\" \r\n            },\r\n            body: JSON.stringify({ Email, Password, Name, PhoneNumber, types })\r\n        });\r\n\r\n        const JsonData = await Fetch.json();\r\n        console.log(JsonData);\r\n        if (!Fetch.ok) {\r\n            // Handle the Error because if the user is not available\r\n            setLoading(false);\r\n            setError(JsonData.Error);\r\n            toast.error(iserror)\r\n        } else {\r\n            // Save the user to localStorage for authentication purpose\r\n            setLoading(false);\r\n            localStorage.setItem('User', JSON.stringify(JsonData));\r\n            dispatch({ type: \"Login\", payload: JsonData });\r\n            toast.success(\"Successfully Loggedin\")\r\n            location(`/${types===\"user\"?\"home\":\"ownerhome\"}`);\r\n        }\r\n    }\r\n    return { GuestHouse, isloading, iserror };\r\n}\r\n\r\n\r\nexport default useGuestHouse"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,SAAS,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM;IAAEU;EAAS,CAAC,GAAGT,cAAc,CAAC,CAAC;EACrC,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,UAAU,GAAG,MAAAA,CAAO;IAAEC,UAAU;IAAEC,WAAW;IAAEC,MAAM;IAAEC;EAAM,CAAC,KAAK;IACrEC,OAAO,CAACC,GAAG,CAAC;MAAEC,KAAK;MAAEC,QAAQ;MAAEC,IAAI;MAAEP,WAAW;MAAEC,MAAM;MAAEC;IAAM,CAAC,CAAC;IAClEC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;IACnBR,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMa,KAAK,GAAG,MAAMC,KAAK,CAAE,yBAAwBR,MAAO,EAAC,EAAE;MACzDS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,KAAK;QAAEC,QAAQ;QAAEC,IAAI;QAAEP,WAAW;QAAEE;MAAM,CAAC;IACtE,CAAC,CAAC;IAEF,MAAMa,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,CAAC;IACnCb,OAAO,CAACC,GAAG,CAACW,QAAQ,CAAC;IACrB,IAAI,CAACP,KAAK,CAACS,EAAE,EAAE;MACX;MACAtB,UAAU,CAAC,KAAK,CAAC;MACjBF,QAAQ,CAACsB,QAAQ,CAACG,KAAK,CAAC;MACxB7B,KAAK,CAAC8B,KAAK,CAAC3B,OAAO,CAAC;IACxB,CAAC,MAAM;MACH;MACAG,UAAU,CAAC,KAAK,CAAC;MACjByB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAER,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;MACtDnB,QAAQ,CAAC;QAAE0B,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAER;MAAS,CAAC,CAAC;MAC9C1B,KAAK,CAACmC,OAAO,CAAC,uBAAuB,CAAC;MACtC3B,QAAQ,CAAE,IAAGK,KAAK,KAAG,MAAM,GAAC,MAAM,GAAC,WAAY,EAAC,CAAC;IACrD;EACJ,CAAC;EACD,OAAO;IAAEJ,UAAU;IAAEJ,SAAS;IAAEF;EAAQ,CAAC;AAC7C,CAAC;AAAAD,EAAA,CApCKD,aAAa;EAAA,QAGMH,cAAc,EAClBC,WAAW;AAAA;AAmChC,eAAeE,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}