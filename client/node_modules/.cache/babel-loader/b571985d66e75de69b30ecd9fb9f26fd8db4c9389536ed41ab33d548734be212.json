{"ast":null,"code":"import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LICENSE_STATUS } from '../utils/licenseStatus';\nimport { LICENSE_SCOPES } from '../utils/licenseScope';\nimport { LICENSING_MODELS } from '../utils/licensingModel';\nconst getDefaultReleaseDate = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\nexport function generateReleaseInfo(releaseDate = getDefaultReleaseDate()) {\n  return base64Encode(releaseDate.getTime().toString());\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\nconst decodeLicenseVersion1 = license => {\n  let expiryTimestamp;\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n  return {\n    scope: 'pro',\n    licensingModel: 'perpetual',\n    expiryTimestamp\n  };\n};\n\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${scope},LM=${licensingModel},KV=2`;\n */\nconst decodeLicenseVersion2 = license => {\n  const licenseInfo = {\n    scope: null,\n    licensingModel: null,\n    expiryTimestamp: null\n  };\n  license.split(',').map(token => token.split('=')).filter(el => el.length === 2).forEach(([key, value]) => {\n    if (key === 'S') {\n      licenseInfo.scope = value;\n    }\n    if (key === 'LM') {\n      licenseInfo.licensingModel = value;\n    }\n    if (key === 'E') {\n      const expiryTimestamp = parseInt(value, 10);\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n  });\n  return licenseInfo;\n};\n\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\nconst decodeLicense = encodedLicense => {\n  const license = base64Decode(encodedLicense);\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n  return null;\n};\nexport function verifyLicense({\n  releaseInfo,\n  licenseKey,\n  acceptedScopes\n}) {\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n  if (!licenseKey) {\n    return {\n      status: LICENSE_STATUS.NotFound\n    };\n  }\n  const hash = licenseKey.substr(0, 32);\n  const encoded = licenseKey.substr(32);\n  if (hash !== md5(encoded)) {\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  const license = decodeLicense(encoded);\n  if (license == null) {\n    console.error('Error checking license. Key version not found!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {\n    console.error('Error checking license. Licensing model not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.expiryTimestamp == null) {\n    console.error('Error checking license. Expiry timestamp not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licensingModel === 'perpetual' || process.env.NODE_ENV === 'production') {\n    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI: The release information is invalid. Not able to validate license.');\n    }\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return {\n        status: LICENSE_STATUS.ExpiredVersion\n      };\n    }\n  } else if (license.licensingModel === 'subscription' || license.licensingModel === 'annual') {\n    if (new Date().getTime() > license.expiryTimestamp) {\n      if (\n      // 30 days grace\n      new Date().getTime() < license.expiryTimestamp + 1000 * 3600 * 24 * 30 || process.env.NODE_ENV !== 'development') {\n        return {\n          status: LICENSE_STATUS.ExpiredAnnualGrace,\n          meta: {\n            expiryTimestamp: license.expiryTimestamp,\n            licenseKey\n          }\n        };\n      }\n      return {\n        status: LICENSE_STATUS.ExpiredAnnual,\n        meta: {\n          expiryTimestamp: license.expiryTimestamp,\n          licenseKey\n        }\n      };\n    }\n  }\n  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {\n    console.error('Error checking license. scope not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (!acceptedScopes.includes(license.scope)) {\n    return {\n      status: LICENSE_STATUS.OutOfScope\n    };\n  }\n  return {\n    status: LICENSE_STATUS.Valid\n  };\n}","map":{"version":3,"names":["base64Decode","base64Encode","md5","LICENSE_STATUS","LICENSE_SCOPES","LICENSING_MODELS","getDefaultReleaseDate","today","Date","setHours","generateReleaseInfo","releaseDate","getTime","toString","expiryReg","decodeLicenseVersion1","license","expiryTimestamp","parseInt","match","Number","isNaN","err","scope","licensingModel","decodeLicenseVersion2","licenseInfo","split","map","token","filter","el","length","forEach","key","value","decodeLicense","encodedLicense","includes","verifyLicense","releaseInfo","licenseKey","acceptedScopes","Error","status","NotFound","hash","substr","encoded","Invalid","console","error","process","env","NODE_ENV","pkgTimestamp","ExpiredVersion","ExpiredAnnualGrace","meta","ExpiredAnnual","OutOfScope","Valid"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js"],"sourcesContent":["import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LICENSE_STATUS } from '../utils/licenseStatus';\nimport { LICENSE_SCOPES } from '../utils/licenseScope';\nimport { LICENSING_MODELS } from '../utils/licensingModel';\nconst getDefaultReleaseDate = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\nexport function generateReleaseInfo(releaseDate = getDefaultReleaseDate()) {\n  return base64Encode(releaseDate.getTime().toString());\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\nconst decodeLicenseVersion1 = license => {\n  let expiryTimestamp;\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n  return {\n    scope: 'pro',\n    licensingModel: 'perpetual',\n    expiryTimestamp\n  };\n};\n\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${scope},LM=${licensingModel},KV=2`;\n */\nconst decodeLicenseVersion2 = license => {\n  const licenseInfo = {\n    scope: null,\n    licensingModel: null,\n    expiryTimestamp: null\n  };\n  license.split(',').map(token => token.split('=')).filter(el => el.length === 2).forEach(([key, value]) => {\n    if (key === 'S') {\n      licenseInfo.scope = value;\n    }\n    if (key === 'LM') {\n      licenseInfo.licensingModel = value;\n    }\n    if (key === 'E') {\n      const expiryTimestamp = parseInt(value, 10);\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n  });\n  return licenseInfo;\n};\n\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\nconst decodeLicense = encodedLicense => {\n  const license = base64Decode(encodedLicense);\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n  return null;\n};\nexport function verifyLicense({\n  releaseInfo,\n  licenseKey,\n  acceptedScopes\n}) {\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n  if (!licenseKey) {\n    return {\n      status: LICENSE_STATUS.NotFound\n    };\n  }\n  const hash = licenseKey.substr(0, 32);\n  const encoded = licenseKey.substr(32);\n  if (hash !== md5(encoded)) {\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  const license = decodeLicense(encoded);\n  if (license == null) {\n    console.error('Error checking license. Key version not found!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {\n    console.error('Error checking license. Licensing model not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.expiryTimestamp == null) {\n    console.error('Error checking license. Expiry timestamp not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licensingModel === 'perpetual' || process.env.NODE_ENV === 'production') {\n    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI: The release information is invalid. Not able to validate license.');\n    }\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return {\n        status: LICENSE_STATUS.ExpiredVersion\n      };\n    }\n  } else if (license.licensingModel === 'subscription' || license.licensingModel === 'annual') {\n    if (new Date().getTime() > license.expiryTimestamp) {\n      if (\n      // 30 days grace\n      new Date().getTime() < license.expiryTimestamp + 1000 * 3600 * 24 * 30 || process.env.NODE_ENV !== 'development') {\n        return {\n          status: LICENSE_STATUS.ExpiredAnnualGrace,\n          meta: {\n            expiryTimestamp: license.expiryTimestamp,\n            licenseKey\n          }\n        };\n      }\n      return {\n        status: LICENSE_STATUS.ExpiredAnnual,\n        meta: {\n          expiryTimestamp: license.expiryTimestamp,\n          licenseKey\n        }\n      };\n    }\n  }\n  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {\n    console.error('Error checking license. scope not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (!acceptedScopes.includes(license.scope)) {\n    return {\n      status: LICENSE_STATUS.OutOfScope\n    };\n  }\n  return {\n    status: LICENSE_STATUS.Valid\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}