{"ast":null,"code":"import _toConsumableArray from \"C:/NewPrac/Prac/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getMonthsInYear } from '../../utils/date-utils';\nexport var getDateSectionConfigFromFormatToken = function getDateSectionConfigFromFormatToken(utils, formatToken) {\n  var config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([\"MUI: The token \\\"\".concat(formatToken, \"\\\" is not supported by the Date and Time Pickers.\"), 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit',\n      maxLength: undefined\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType,\n    maxLength: config.maxLength\n  };\n};\nvar getDeltaFromKeyCode = function getDeltaFromKeyCode(keyCode) {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport var getDaysInWeekStr = function getDaysInWeekStr(utils, timezone, format) {\n  var elements = [];\n  var now = utils.dateWithTimezone(undefined, timezone);\n  var startDate = utils.startOfWeek(now);\n  var endDate = utils.endOfWeek(now);\n  var current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(function (weekDay) {\n    return utils.formatByString(weekDay, format);\n  });\n};\nexport var getLetterEditingOptions = function getLetterEditingOptions(utils, timezone, sectionType, format) {\n  switch (sectionType) {\n    case 'month':\n      {\n        return getMonthsInYear(utils, utils.dateWithTimezone(undefined, timezone)).map(function (month) {\n          return utils.formatByString(month, format);\n        });\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, timezone, format);\n      }\n    case 'meridiem':\n      {\n        var now = utils.dateWithTimezone(undefined, timezone);\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(function (date) {\n          return utils.formatByString(date, format);\n        });\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport var cleanLeadingZeros = function cleanLeadingZeros(utils, valueStr, size) {\n  var cleanValueStr = valueStr;\n\n  // Remove the leading zeros\n  cleanValueStr = Number(cleanValueStr).toString();\n\n  // Add enough leading zeros to fill the section\n  while (cleanValueStr.length < size) {\n    cleanValueStr = \"0\".concat(cleanValueStr);\n  }\n  return cleanValueStr;\n};\nexport var cleanDigitSectionValue = function cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (section.type !== 'day' && section.contentType === 'digit-with-letter') {\n      throw new Error([\"MUI: The token \\\"\".concat(section.format, \"\\\" is a digit format with letter in it.'\\n             This type of format is only supported for 'day' sections\")].join('\\n'));\n    }\n  }\n  if (section.type === 'day' && section.contentType === 'digit-with-letter') {\n    var date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, section.format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  var valueStr = value.toString();\n  if (section.hasLeadingZerosInInput) {\n    return cleanLeadingZeros(utils, valueStr, section.maxLength);\n  }\n  return valueStr;\n};\nexport var adjustSectionValue = function adjustSectionValue(utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) {\n  var delta = getDeltaFromKeyCode(keyCode);\n  var isStart = keyCode === 'Home';\n  var isEnd = keyCode === 'End';\n  var shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  var adjustDigitSection = function adjustDigitSection() {\n    var sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    var getCleanValue = function getCleanValue(value) {\n      return cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);\n    };\n    var step = section.type === 'minutes' && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;\n    var currentSectionValue = parseInt(section.value, 10);\n    var newSectionValueNumber = currentSectionValue + delta * step;\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.dateWithTimezone(undefined, timezone), section.format);\n      }\n      if (delta > 0 || isStart) {\n        newSectionValueNumber = sectionBoundaries.minimum;\n      } else {\n        newSectionValueNumber = sectionBoundaries.maximum;\n      }\n    }\n    if (newSectionValueNumber % step !== 0) {\n      if (delta < 0 || isStart) {\n        newSectionValueNumber += step - (step + newSectionValueNumber) % step; // for JS -3 % 5 = -3 (should be 2)\n      }\n\n      if (delta > 0 || isEnd) {\n        newSectionValueNumber -= newSectionValueNumber % step;\n      }\n    }\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  var adjustLetterSection = function adjustLetterSection() {\n    var options = getLetterEditingOptions(utils, timezone, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    var currentOptionIndex = options.indexOf(section.value);\n    var newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit' || section.contentType === 'digit-with-letter') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nexport var getSectionVisibleValue = function getSectionVisibleValue(section, target) {\n  var value = section.value || section.placeholder;\n  var hasLeadingZeros = target === 'non-input' ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;\n  if (target === 'non-input' && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {\n    value = Number(value).toString();\n  }\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  var shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !hasLeadingZeros && value.length === 1;\n  if (shouldAddInvisibleSpace) {\n    value = \"\".concat(value, \"\\u200E\");\n  }\n  if (target === 'input-rtl') {\n    value = \"\\u2068\".concat(value, \"\\u2069\");\n  }\n  return value;\n};\nexport var cleanString = function cleanString(dirtyString) {\n  return dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\n};\nexport var addPositionPropertiesToSections = function addPositionPropertiesToSections(sections, isRTL) {\n  var position = 0;\n  var positionInInput = isRTL ? 1 : 0;\n  var newSections = [];\n  for (var i = 0; i < sections.length; i += 1) {\n    var section = sections[i];\n    var renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    var sectionStr = \"\".concat(section.startSeparator).concat(renderedValue).concat(section.endSeparator);\n    var sectionLength = cleanString(sectionStr).length;\n    var sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    var cleanedValue = cleanString(renderedValue);\n    var startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    var endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput: startInInput,\n      endInInput: endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nvar getSectionPlaceholder = function getSectionPlaceholder(utils, timezone, localeText, sectionConfig, currentTokenValue) {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.dateWithTimezone(undefined, timezone), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport var changeSectionValueFormat = function changeSectionValueFormat(utils, valueStr, currentFormat, newFormat) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nvar isFourDigitYearFormat = function isFourDigitYearFormat(utils, timezone, format) {\n  return utils.formatByString(utils.dateWithTimezone(undefined, timezone), format).length === 4;\n};\nexport var doesSectionFormatHaveLeadingZeros = function doesSectionFormatHaveLeadingZeros(utils, timezone, contentType, sectionType, format) {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  var now = utils.dateWithTimezone(undefined, timezone);\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, timezone, format)) {\n          var formatted0001 = utils.formatByString(utils.setYear(now, 1), format);\n          return formatted0001 === '0001';\n        }\n        var formatted2001 = utils.formatByString(utils.setYear(now, 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(now), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(now), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(now), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(now, 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nvar getEscapedPartsFromFormat = function getEscapedPartsFromFormat(utils, format) {\n  var escapedParts = [];\n  var _utils$escapedCharact = utils.escapedCharacters,\n    startChar = _utils$escapedCharact.start,\n    endChar = _utils$escapedCharact.end;\n  var regExp = new RegExp(\"(\\\\\".concat(startChar, \"[^\\\\\").concat(endChar, \"]*\\\\\").concat(endChar, \")+\"), 'g');\n  var match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport var splitFormatIntoSections = function splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL) {\n  var startSeparator = '';\n  var sections = [];\n  var now = utils.date();\n  var commitToken = function commitToken(token) {\n    if (token === '') {\n      return null;\n    }\n    var sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    var hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token);\n    var hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === 'digit';\n    var isValidDate = date != null && utils.isValid(date);\n    var sectionValue = isValidDate ? utils.formatByString(date, token) : '';\n    var maxLength = null;\n    if (hasLeadingZerosInInput) {\n      if (hasLeadingZerosInFormat) {\n        maxLength = sectionValue === '' ? utils.formatByString(now, token).length : sectionValue.length;\n      } else {\n        if (sectionConfig.maxLength == null) {\n          throw new Error(\"MUI: The token \".concat(token, \" should have a 'maxDigitNumber' property on it's adapter\"));\n        }\n        maxLength = sectionConfig.maxLength;\n        if (isValidDate) {\n          sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);\n        }\n      }\n    }\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      maxLength: maxLength,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token),\n      hasLeadingZeros: hasLeadingZerosInFormat,\n      hasLeadingZerosInFormat: hasLeadingZerosInFormat,\n      hasLeadingZerosInInput: hasLeadingZerosInInput,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n\n  // Expand the provided format\n  var formatExpansionOverflow = 10;\n  var prevFormat = format;\n  var nextFormat = utils.expandFormat(format);\n  while (nextFormat !== prevFormat) {\n    prevFormat = nextFormat;\n    nextFormat = utils.expandFormat(prevFormat);\n    formatExpansionOverflow -= 1;\n    if (formatExpansionOverflow < 0) {\n      throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');\n    }\n  }\n  var expandedFormat = nextFormat;\n\n  // Get start/end indexes of escaped sections\n  var escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);\n\n  // This RegExp test if the beginning of a string correspond to a supported token\n  var isTokenStartRegExp = new RegExp(\"^(\".concat(Object.keys(utils.formatTokenMap).sort(function (a, b) {\n    return b.length - a.length;\n  }) // Sort to put longest word first\n  .join('|'), \")\"), 'g') // used to get access to lastIndex state\n  ;\n\n  var currentTokenValue = '';\n  var _loop = function _loop(_i) {\n    var escapedPartOfCurrentChar = escapedParts.find(function (escapeIndex) {\n      return escapeIndex.start <= _i && escapeIndex.end >= _i;\n    });\n    var char = expandedFormat[_i];\n    var isEscapedChar = escapedPartOfCurrentChar != null;\n    var potentialToken = \"\".concat(currentTokenValue).concat(expandedFormat.slice(_i));\n    var regExpMatch = isTokenStartRegExp.test(potentialToken);\n    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && regExpMatch) {\n      currentTokenValue = potentialToken.slice(0, isTokenStartRegExp.lastIndex);\n      _i += isTokenStartRegExp.lastIndex - 1;\n    } else {\n      // If we are on the opening or closing character of an escaped part of the format,\n      // Then we ignore this character.\n      var isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === _i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === _i;\n      if (!isEscapeBoundary) {\n        commitToken(currentTokenValue);\n        currentTokenValue = '';\n        if (sections.length === 0) {\n          startSeparator += char;\n        } else {\n          sections[sections.length - 1].endSeparator += char;\n        }\n      }\n    }\n    i = _i;\n  };\n  for (var i = 0; i < expandedFormat.length; i += 1) {\n    _loop(i);\n  }\n  commitToken(currentTokenValue);\n  return sections.map(function (section) {\n    var cleanSeparator = function cleanSeparator(separator) {\n      var cleanedSeparator = separator;\n      if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = \"\\u2069\".concat(cleanedSeparator, \"\\u2066\");\n      }\n      if (formatDensity === 'spacious' && ['/', '.', '-'].includes(cleanedSeparator)) {\n        cleanedSeparator = \" \".concat(cleanedSeparator, \" \");\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport var getDateFromDateSections = function getDateFromDateSections(utils, sections) {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  var shouldSkipWeekDays = sections.some(function (section) {\n    return section.type === 'day';\n  });\n  var sectionFormats = [];\n  var sectionValues = [];\n  for (var i = 0; i < sections.length; i += 1) {\n    var section = sections[i];\n    var shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, 'non-input'));\n    }\n  }\n  var formatWithoutSeparator = sectionFormats.join(' ');\n  var dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport var createDateStrForInputFromSections = function createDateStrForInputFromSections(sections, isRTL) {\n  var formattedSections = sections.map(function (section) {\n    var dateValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    return \"\".concat(section.startSeparator).concat(dateValue).concat(section.endSeparator);\n  });\n  var dateStr = formattedSections.join('');\n  if (!isRTL) {\n    return dateStr;\n  }\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return \"\\u2066\".concat(dateStr, \"\\u2069\");\n};\nexport var getSectionsBoundaries = function getSectionsBoundaries(utils, timezone) {\n  var today = utils.dateWithTimezone(undefined, timezone);\n  var endOfYear = utils.endOfYear(today);\n  var endOfDay = utils.endOfDay(today);\n  var _getMonthsInYear$redu = getMonthsInYear(utils, today).reduce(function (acc, month) {\n      var daysInMonth = utils.getDaysInMonth(month);\n      if (daysInMonth > acc.maxDaysInMonth) {\n        return {\n          maxDaysInMonth: daysInMonth,\n          longestMonth: month\n        };\n      }\n      return acc;\n    }, {\n      maxDaysInMonth: 0,\n      longestMonth: null\n    }),\n    maxDaysInMonth = _getMonthsInYear$redu.maxDaysInMonth,\n    longestMonth = _getMonthsInYear$redu.longestMonth;\n  return {\n    year: function year(_ref) {\n      var format = _ref.format;\n      return {\n        minimum: 0,\n        maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99\n      };\n    },\n    month: function month() {\n      return {\n        minimum: 1,\n        // Assumption: All years have the same amount of months\n        maximum: utils.getMonth(endOfYear) + 1\n      };\n    },\n    day: function day(_ref2) {\n      var currentDate = _ref2.currentDate;\n      return {\n        minimum: 1,\n        maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n        longestMonth: longestMonth\n      };\n    },\n    weekDay: function weekDay(_ref3) {\n      var format = _ref3.format,\n        contentType = _ref3.contentType;\n      if (contentType === 'digit') {\n        var daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);\n        return {\n          minimum: Math.min.apply(Math, _toConsumableArray(daysInWeek)),\n          maximum: Math.max.apply(Math, _toConsumableArray(daysInWeek))\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: function hours(_ref4) {\n      var format = _ref4.format;\n      var lastHourInDay = utils.getHours(endOfDay);\n      var hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: function minutes() {\n      return {\n        minimum: 0,\n        // Assumption: All years have the same amount of minutes\n        maximum: utils.getMinutes(endOfDay)\n      };\n    },\n    seconds: function seconds() {\n      return {\n        minimum: 0,\n        // Assumption: All years have the same amount of seconds\n        maximum: utils.getSeconds(endOfDay)\n      };\n    },\n    meridiem: function meridiem() {\n      return {\n        minimum: 0,\n        maximum: 0\n      };\n    }\n  };\n};\nvar warnedOnceInvalidSection = false;\nexport var validateSections = function validateSections(sections, valueType) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      var supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      var invalidSection = sections.find(function (section) {\n        return !supportedSections.includes(section.type);\n      });\n      if (invalidSection) {\n        console.warn(\"MUI: The field component you are using is not compatible with the \\\"\".concat(invalidSection.type, \" date section.\"), \"The supported date sections are [\\\"\".concat(supportedSections.join('\", \"'), \"\\\"]`.\"));\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nvar transferDateSectionValue = function transferDateSectionValue(utils, timezone, section, dateToTransferFrom, dateToTransferTo) {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        var formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);\n        var dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        var dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        var dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        var diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        var isAM = utils.getHours(dateToTransferFrom) < 12;\n        var mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nvar reliableSectionModificationOrder = {\n  year: 1,\n  month: 2,\n  day: 3,\n  weekDay: 4,\n  hours: 5,\n  minutes: 6,\n  seconds: 7,\n  meridiem: 8\n};\nexport var mergeDateIntoReferenceDate = function mergeDateIntoReferenceDate(utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) {\n  return (\n    // cloning sections before sort to avoid mutating it\n    _toConsumableArray(sections).sort(function (a, b) {\n      return reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type];\n    }).reduce(function (mergedDate, section) {\n      if (!shouldLimitToEditedSections || section.modified) {\n        return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);\n      }\n      return mergedDate;\n    }, referenceDate)\n  );\n};\nexport var isAndroid = function isAndroid() {\n  return navigator.userAgent.toLowerCase().indexOf('android') > -1;\n};\nexport var getSectionOrder = function getSectionOrder(sections, isRTL) {\n  var neighbors = {};\n  if (!isRTL) {\n    sections.forEach(function (_, index) {\n      var leftIndex = index === 0 ? null : index - 1;\n      var rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex: leftIndex,\n        rightIndex: rightIndex\n      };\n    });\n    return {\n      neighbors: neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  var rtl2ltr = {};\n  var ltr2rtl = {};\n  var groupedSectionsStart = 0;\n  var groupedSectionsEnd = 0;\n  var RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    function (section, index) {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' ')) &&\n      // Special case where the spaces were not there in the initial input\n      section.endSeparator !== ' / ';\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (var i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach(function (_, index) {\n    var rtlIndex = ltr2rtl[index];\n    var leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    var rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex: leftIndex,\n      rightIndex: rightIndex\n    };\n  });\n  return {\n    neighbors: neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};","map":{"version":3,"names":["_extends","getMonthsInYear","getDateSectionConfigFromFormatToken","utils","formatToken","config","formatTokenMap","Error","concat","join","type","contentType","maxLength","undefined","sectionType","getDeltaFromKeyCode","keyCode","getDaysInWeekStr","timezone","format","elements","now","dateWithTimezone","startDate","startOfWeek","endDate","endOfWeek","current","isBefore","push","addDays","map","weekDay","formatByString","getLetterEditingOptions","month","startOfDay","endOfDay","date","cleanLeadingZeros","valueStr","size","cleanValueStr","Number","toString","length","cleanDigitSectionValue","value","sectionBoundaries","section","process","env","NODE_ENV","setDate","longestMonth","hasLeadingZerosInInput","adjustSectionValue","sectionsValueBoundaries","activeDate","stepsAttributes","delta","isStart","isEnd","shouldSetAbsolute","adjustDigitSection","currentDate","getCleanValue","step","minutesStep","currentSectionValue","parseInt","newSectionValueNumber","minimum","maximum","adjustLetterSection","options","currentOptionIndex","indexOf","newOptionIndex","getSectionVisibleValue","target","placeholder","hasLeadingZeros","hasLeadingZerosInFormat","shouldAddInvisibleSpace","includes","cleanString","dirtyString","replace","addPositionPropertiesToSections","sections","isRTL","position","positionInInput","newSections","i","renderedValue","sectionStr","startSeparator","endSeparator","sectionLength","sectionLengthInInput","cleanedValue","startInInput","endInInput","start","end","getSectionPlaceholder","localeText","sectionConfig","currentTokenValue","fieldYearPlaceholder","digitAmount","fieldMonthPlaceholder","fieldDayPlaceholder","fieldWeekDayPlaceholder","fieldHoursPlaceholder","fieldMinutesPlaceholder","fieldSecondsPlaceholder","fieldMeridiemPlaceholder","changeSectionValueFormat","currentFormat","newFormat","parse","isFourDigitYearFormat","doesSectionFormatHaveLeadingZeros","formatted0001","setYear","formatted2001","startOfYear","startOfMonth","setHours","setMinutes","getEscapedPartsFromFormat","escapedParts","_utils$escapedCharact","escapedCharacters","startChar","endChar","regExp","RegExp","match","exec","index","lastIndex","splitFormatIntoSections","formatDensity","shouldRespectLeadingZeros","commitToken","token","isValidDate","isValid","sectionValue","modified","formatExpansionOverflow","prevFormat","nextFormat","expandFormat","expandedFormat","isTokenStartRegExp","Object","keys","sort","a","b","_loop","_i","escapedPartOfCurrentChar","find","escapeIndex","char","isEscapedChar","potentialToken","slice","regExpMatch","test","isEscapeBoundary","cleanSeparator","separator","cleanedSeparator","getDateFromDateSections","shouldSkipWeekDays","some","sectionFormats","sectionValues","shouldSkip","formatWithoutSeparator","dateWithoutSeparatorStr","createDateStrForInputFromSections","formattedSections","dateValue","dateStr","getSectionsBoundaries","today","endOfYear","_getMonthsInYear$redu","reduce","acc","daysInMonth","getDaysInMonth","maxDaysInMonth","year","_ref","getMonth","day","_ref2","_ref3","daysInWeek","Math","min","apply","_toConsumableArray","max","hours","_ref4","lastHourInDay","getHours","hasMeridiem","minutes","getMinutes","seconds","getSeconds","meridiem","warnedOnceInvalidSection","validateSections","valueType","supportedSections","invalidSection","console","warn","transferDateSectionValue","dateToTransferFrom","dateToTransferTo","getYear","setMonth","formattedDaysInWeek","dayInWeekStrOfActiveDate","dayInWeekOfActiveDate","dayInWeekOfNewSectionValue","diff","getDate","isAM","mergedDateHours","addHours","setSeconds","reliableSectionModificationOrder","mergeDateIntoReferenceDate","referenceDate","shouldLimitToEditedSections","mergedDate","isAndroid","navigator","userAgent","toLowerCase","getSectionOrder","neighbors","forEach","_","leftIndex","rightIndex","startIndex","endIndex","rtl2ltr","ltr2rtl","groupedSectionsStart","groupedSectionsEnd","RTLIndex","findIndex","_section$endSeparator","rtlIndex"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getMonthsInYear } from '../../utils/date-utils';\nexport const getDateSectionConfigFromFormatToken = (utils, formatToken) => {\n  const config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([`MUI: The token \"${formatToken}\" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit',\n      maxLength: undefined\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType,\n    maxLength: config.maxLength\n  };\n};\nconst getDeltaFromKeyCode = keyCode => {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport const getDaysInWeekStr = (utils, timezone, format) => {\n  const elements = [];\n  const now = utils.dateWithTimezone(undefined, timezone);\n  const startDate = utils.startOfWeek(now);\n  const endDate = utils.endOfWeek(now);\n  let current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(weekDay => utils.formatByString(weekDay, format));\n};\nexport const getLetterEditingOptions = (utils, timezone, sectionType, format) => {\n  switch (sectionType) {\n    case 'month':\n      {\n        return getMonthsInYear(utils, utils.dateWithTimezone(undefined, timezone)).map(month => utils.formatByString(month, format));\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, timezone, format);\n      }\n    case 'meridiem':\n      {\n        const now = utils.dateWithTimezone(undefined, timezone);\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport const cleanLeadingZeros = (utils, valueStr, size) => {\n  let cleanValueStr = valueStr;\n\n  // Remove the leading zeros\n  cleanValueStr = Number(cleanValueStr).toString();\n\n  // Add enough leading zeros to fill the section\n  while (cleanValueStr.length < size) {\n    cleanValueStr = `0${cleanValueStr}`;\n  }\n  return cleanValueStr;\n};\nexport const cleanDigitSectionValue = (utils, timezone, value, sectionBoundaries, section) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (section.type !== 'day' && section.contentType === 'digit-with-letter') {\n      throw new Error([`MUI: The token \"${section.format}\" is a digit format with letter in it.'\n             This type of format is only supported for 'day' sections`].join('\\n'));\n    }\n  }\n  if (section.type === 'day' && section.contentType === 'digit-with-letter') {\n    const date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, section.format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  const valueStr = value.toString();\n  if (section.hasLeadingZerosInInput) {\n    return cleanLeadingZeros(utils, valueStr, section.maxLength);\n  }\n  return valueStr;\n};\nexport const adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) => {\n  const delta = getDeltaFromKeyCode(keyCode);\n  const isStart = keyCode === 'Home';\n  const isEnd = keyCode === 'End';\n  const shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  const adjustDigitSection = () => {\n    const sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    const getCleanValue = value => cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);\n    const step = section.type === 'minutes' && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;\n    const currentSectionValue = parseInt(section.value, 10);\n    let newSectionValueNumber = currentSectionValue + delta * step;\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.dateWithTimezone(undefined, timezone), section.format);\n      }\n      if (delta > 0 || isStart) {\n        newSectionValueNumber = sectionBoundaries.minimum;\n      } else {\n        newSectionValueNumber = sectionBoundaries.maximum;\n      }\n    }\n    if (newSectionValueNumber % step !== 0) {\n      if (delta < 0 || isStart) {\n        newSectionValueNumber += step - (step + newSectionValueNumber) % step; // for JS -3 % 5 = -3 (should be 2)\n      }\n\n      if (delta > 0 || isEnd) {\n        newSectionValueNumber -= newSectionValueNumber % step;\n      }\n    }\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  const adjustLetterSection = () => {\n    const options = getLetterEditingOptions(utils, timezone, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    const currentOptionIndex = options.indexOf(section.value);\n    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit' || section.contentType === 'digit-with-letter') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nexport const getSectionVisibleValue = (section, target) => {\n  let value = section.value || section.placeholder;\n  const hasLeadingZeros = target === 'non-input' ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;\n  if (target === 'non-input' && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {\n    value = Number(value).toString();\n  }\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  const shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !hasLeadingZeros && value.length === 1;\n  if (shouldAddInvisibleSpace) {\n    value = `${value}\\u200e`;\n  }\n  if (target === 'input-rtl') {\n    value = `\\u2068${value}\\u2069`;\n  }\n  return value;\n};\nexport const cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nexport const addPositionPropertiesToSections = (sections, isRTL) => {\n  let position = 0;\n  let positionInInput = isRTL ? 1 : 0;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nconst getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, currentTokenValue) => {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.dateWithTimezone(undefined, timezone), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nconst isFourDigitYearFormat = (utils, timezone, format) => utils.formatByString(utils.dateWithTimezone(undefined, timezone), format).length === 4;\nexport const doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format) => {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  const now = utils.dateWithTimezone(undefined, timezone);\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, timezone, format)) {\n          const formatted0001 = utils.formatByString(utils.setYear(now, 1), format);\n          return formatted0001 === '0001';\n        }\n        const formatted2001 = utils.formatByString(utils.setYear(now, 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(now), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(now), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(now), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(now, 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nconst getEscapedPartsFromFormat = (utils, format) => {\n  const escapedParts = [];\n  const {\n    start: startChar,\n    end: endChar\n  } = utils.escapedCharacters;\n  const regExp = new RegExp(`(\\\\${startChar}[^\\\\${endChar}]*\\\\${endChar})+`, 'g');\n  let match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport const splitFormatIntoSections = (utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {\n  let startSeparator = '';\n  const sections = [];\n  const now = utils.date();\n  const commitToken = token => {\n    if (token === '') {\n      return null;\n    }\n    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token);\n    const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === 'digit';\n    const isValidDate = date != null && utils.isValid(date);\n    let sectionValue = isValidDate ? utils.formatByString(date, token) : '';\n    let maxLength = null;\n    if (hasLeadingZerosInInput) {\n      if (hasLeadingZerosInFormat) {\n        maxLength = sectionValue === '' ? utils.formatByString(now, token).length : sectionValue.length;\n      } else {\n        if (sectionConfig.maxLength == null) {\n          throw new Error(`MUI: The token ${token} should have a 'maxDigitNumber' property on it's adapter`);\n        }\n        maxLength = sectionConfig.maxLength;\n        if (isValidDate) {\n          sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);\n        }\n      }\n    }\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      maxLength,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token),\n      hasLeadingZeros: hasLeadingZerosInFormat,\n      hasLeadingZerosInFormat,\n      hasLeadingZerosInInput,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n\n  // Expand the provided format\n  let formatExpansionOverflow = 10;\n  let prevFormat = format;\n  let nextFormat = utils.expandFormat(format);\n  while (nextFormat !== prevFormat) {\n    prevFormat = nextFormat;\n    nextFormat = utils.expandFormat(prevFormat);\n    formatExpansionOverflow -= 1;\n    if (formatExpansionOverflow < 0) {\n      throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');\n    }\n  }\n  const expandedFormat = nextFormat;\n\n  // Get start/end indexes of escaped sections\n  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);\n\n  // This RegExp test if the beginning of a string correspond to a supported token\n  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).sort((a, b) => b.length - a.length) // Sort to put longest word first\n  .join('|')})`, 'g') // used to get access to lastIndex state\n  ;\n\n  let currentTokenValue = '';\n  for (let i = 0; i < expandedFormat.length; i += 1) {\n    const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);\n    const char = expandedFormat[i];\n    const isEscapedChar = escapedPartOfCurrentChar != null;\n    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;\n    const regExpMatch = isTokenStartRegExp.test(potentialToken);\n    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && regExpMatch) {\n      currentTokenValue = potentialToken.slice(0, isTokenStartRegExp.lastIndex);\n      i += isTokenStartRegExp.lastIndex - 1;\n    } else {\n      // If we are on the opening or closing character of an escaped part of the format,\n      // Then we ignore this character.\n      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;\n      if (!isEscapeBoundary) {\n        commitToken(currentTokenValue);\n        currentTokenValue = '';\n        if (sections.length === 0) {\n          startSeparator += char;\n        } else {\n          sections[sections.length - 1].endSeparator += char;\n        }\n      }\n    }\n  }\n  commitToken(currentTokenValue);\n  return sections.map(section => {\n    const cleanSeparator = separator => {\n      let cleanedSeparator = separator;\n      if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = `\\u2069${cleanedSeparator}\\u2066`;\n      }\n      if (formatDensity === 'spacious' && ['/', '.', '-'].includes(cleanedSeparator)) {\n        cleanedSeparator = ` ${cleanedSeparator} `;\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport const getDateFromDateSections = (utils, sections) => {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  const shouldSkipWeekDays = sections.some(section => section.type === 'day');\n  const sectionFormats = [];\n  const sectionValues = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, 'non-input'));\n    }\n  }\n  const formatWithoutSeparator = sectionFormats.join(' ');\n  const dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport const createDateStrForInputFromSections = (sections, isRTL) => {\n  const formattedSections = sections.map(section => {\n    const dateValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    return `${section.startSeparator}${dateValue}${section.endSeparator}`;\n  });\n  const dateStr = formattedSections.join('');\n  if (!isRTL) {\n    return dateStr;\n  }\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return `\\u2066${dateStr}\\u2069`;\n};\nexport const getSectionsBoundaries = (utils, timezone) => {\n  const today = utils.dateWithTimezone(undefined, timezone);\n  const endOfYear = utils.endOfYear(today);\n  const endOfDay = utils.endOfDay(today);\n  const {\n    maxDaysInMonth,\n    longestMonth\n  } = getMonthsInYear(utils, today).reduce((acc, month) => {\n    const daysInMonth = utils.getDaysInMonth(month);\n    if (daysInMonth > acc.maxDaysInMonth) {\n      return {\n        maxDaysInMonth: daysInMonth,\n        longestMonth: month\n      };\n    }\n    return acc;\n  }, {\n    maxDaysInMonth: 0,\n    longestMonth: null\n  });\n  return {\n    year: ({\n      format\n    }) => ({\n      minimum: 0,\n      maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99\n    }),\n    month: () => ({\n      minimum: 1,\n      // Assumption: All years have the same amount of months\n      maximum: utils.getMonth(endOfYear) + 1\n    }),\n    day: ({\n      currentDate\n    }) => ({\n      minimum: 1,\n      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n      longestMonth: longestMonth\n    }),\n    weekDay: ({\n      format,\n      contentType\n    }) => {\n      if (contentType === 'digit') {\n        const daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);\n        return {\n          minimum: Math.min(...daysInWeek),\n          maximum: Math.max(...daysInWeek)\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: ({\n      format\n    }) => {\n      const lastHourInDay = utils.getHours(endOfDay);\n      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of minutes\n      maximum: utils.getMinutes(endOfDay)\n    }),\n    seconds: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of seconds\n      maximum: utils.getSeconds(endOfDay)\n    }),\n    meridiem: () => ({\n      minimum: 0,\n      maximum: 0\n    })\n  };\n};\nlet warnedOnceInvalidSection = false;\nexport const validateSections = (sections, valueType) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      const supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      const invalidSection = sections.find(section => !supportedSections.includes(section.type));\n      if (invalidSection) {\n        console.warn(`MUI: The field component you are using is not compatible with the \"${invalidSection.type} date section.`, `The supported date sections are [\"${supportedSections.join('\", \"')}\"]\\`.`);\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nconst transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);\n        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        const isAM = utils.getHours(dateToTransferFrom) < 12;\n        const mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nconst reliableSectionModificationOrder = {\n  year: 1,\n  month: 2,\n  day: 3,\n  weekDay: 4,\n  hours: 5,\n  minutes: 6,\n  seconds: 7,\n  meridiem: 8\n};\nexport const mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) =>\n// cloning sections before sort to avoid mutating it\n[...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {\n  if (!shouldLimitToEditedSections || section.modified) {\n    return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);\n  }\n  return mergedDate;\n}, referenceDate);\nexport const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;\nexport const getSectionOrder = (sections, isRTL) => {\n  const neighbors = {};\n  if (!isRTL) {\n    sections.forEach((_, index) => {\n      const leftIndex = index === 0 ? null : index - 1;\n      const rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex,\n        rightIndex\n      };\n    });\n    return {\n      neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  const rtl2ltr = {};\n  const ltr2rtl = {};\n  let groupedSectionsStart = 0;\n  let groupedSectionsEnd = 0;\n  let RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    (section, index) => {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' ')) &&\n      // Special case where the spaces were not there in the initial input\n      section.endSeparator !== ' / ';\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach((_, index) => {\n    const rtlIndex = ltr2rtl[index];\n    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex,\n      rightIndex\n    };\n  });\n  return {\n    neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}