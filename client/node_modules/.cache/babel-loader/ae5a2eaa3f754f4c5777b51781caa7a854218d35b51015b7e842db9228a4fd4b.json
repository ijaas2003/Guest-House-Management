{"ast":null,"code":"import _slicedToArray from \"C:/NewPrac/Prac/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from './useIsDateDisabled';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { SECTION_TYPE_GRANULARITY } from '../internals/utils/getDefaultReferenceDate';\nexport var createCalendarStateReducer = function createCalendarStateReducer(reduceAnimations, disableSwitchToMonthOnDayFocus, utils) {\n  return function (state, action) {\n    switch (action.type) {\n      case 'changeMonth':\n        return _extends({}, state, {\n          slideDirection: action.direction,\n          currentMonth: action.newMonth,\n          isMonthSwitchingAnimating: !reduceAnimations\n        });\n      case 'finishMonthSwitchingAnimation':\n        return _extends({}, state, {\n          isMonthSwitchingAnimating: false\n        });\n      case 'changeFocusedDay':\n        {\n          if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n            return state;\n          }\n          var needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n          return _extends({}, state, {\n            focusedDay: action.focusedDay,\n            isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n            currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n            slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n          });\n        }\n      default:\n        throw new Error('missing support');\n    }\n  };\n};\nexport var useCalendarState = function useCalendarState(params) {\n  var value = params.value,\n    referenceDateProp = params.referenceDate,\n    defaultCalendarMonth = params.defaultCalendarMonth,\n    disableFuture = params.disableFuture,\n    disablePast = params.disablePast,\n    _params$disableSwitch = params.disableSwitchToMonthOnDayFocus,\n    disableSwitchToMonthOnDayFocus = _params$disableSwitch === void 0 ? false : _params$disableSwitch,\n    maxDate = params.maxDate,\n    minDate = params.minDate,\n    onMonthChange = params.onMonthChange,\n    reduceAnimations = params.reduceAnimations,\n    shouldDisableDate = params.shouldDisableDate,\n    timezone = params.timezone;\n  var now = useNow(timezone);\n  var utils = useUtils();\n  var reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  var referenceDate = React.useMemo(function () {\n    var externalReferenceDate = null;\n    if (referenceDateProp) {\n      externalReferenceDate = referenceDateProp;\n    } else if (defaultCalendarMonth) {\n      // For `defaultCalendarMonth`, we just want to keep the month and the year to avoid a behavior change.\n      externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);\n    }\n    return singleItemValueManager.getInitialReferenceValue({\n      value: value,\n      utils: utils,\n      timezone: timezone,\n      props: params,\n      referenceDate: externalReferenceDate,\n      granularity: SECTION_TYPE_GRANULARITY.day\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var _React$useReducer = React.useReducer(reducerFn, {\n      isMonthSwitchingAnimating: false,\n      focusedDay: value || now,\n      currentMonth: utils.startOfMonth(referenceDate),\n      slideDirection: 'left'\n    }),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    calendarState = _React$useReducer2[0],\n    dispatch = _React$useReducer2[1];\n  var handleChangeMonth = React.useCallback(function (payload) {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  var changeMonth = React.useCallback(function (newDate) {\n    var newDateRequested = newDate;\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  var isDateDisabled = useIsDateDisabled({\n    shouldDisableDate: shouldDisableDate,\n    minDate: minDate,\n    maxDate: maxDate,\n    disableFuture: disableFuture,\n    disablePast: disablePast,\n    timezone: timezone\n  });\n  var onMonthSwitchingAnimationEnd = React.useCallback(function () {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  var changeFocusedDay = useEventCallback(function (newFocusedDate, withoutMonthSwitchingAnimation) {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation: withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    referenceDate: referenceDate,\n    calendarState: calendarState,\n    changeMonth: changeMonth,\n    changeFocusedDay: changeFocusedDay,\n    isDateDisabled: isDateDisabled,\n    onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,\n    handleChangeMonth: handleChangeMonth\n  };\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useIsDateDisabled","useUtils","useNow","singleItemValueManager","SECTION_TYPE_GRANULARITY","createCalendarStateReducer","reduceAnimations","disableSwitchToMonthOnDayFocus","utils","state","action","type","slideDirection","direction","currentMonth","newMonth","isMonthSwitchingAnimating","focusedDay","isSameDay","needMonthSwitch","isSameMonth","withoutMonthSwitchingAnimation","startOfMonth","isAfterDay","Error","useCalendarState","params","value","referenceDateProp","referenceDate","defaultCalendarMonth","disableFuture","disablePast","_params$disableSwitch","maxDate","minDate","onMonthChange","shouldDisableDate","timezone","now","reducerFn","useRef","Boolean","current","useMemo","externalReferenceDate","getInitialReferenceValue","props","granularity","day","_React$useReducer","useReducer","_React$useReducer2","_slicedToArray","calendarState","dispatch","handleChangeMonth","useCallback","payload","changeMonth","newDate","newDateRequested","isDateDisabled","onMonthSwitchingAnimationEnd","changeFocusedDay","newFocusedDate"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from './useIsDateDisabled';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { SECTION_TYPE_GRANULARITY } from '../internals/utils/getDefaultReferenceDate';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = params => {\n  const {\n    value,\n    referenceDate: referenceDateProp,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus = false,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate,\n    timezone\n  } = params;\n  const now = useNow(timezone);\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const referenceDate = React.useMemo(() => {\n    let externalReferenceDate = null;\n    if (referenceDateProp) {\n      externalReferenceDate = referenceDateProp;\n    } else if (defaultCalendarMonth) {\n      // For `defaultCalendarMonth`, we just want to keep the month and the year to avoid a behavior change.\n      externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);\n    }\n    return singleItemValueManager.getInitialReferenceValue({\n      value,\n      utils,\n      timezone,\n      props: params,\n      referenceDate: externalReferenceDate,\n      granularity: SECTION_TYPE_GRANULARITY.day\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: value || now,\n    currentMonth: utils.startOfMonth(referenceDate),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate;\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  const isDateDisabled = useIsDateDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast,\n    timezone\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = useEventCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    referenceDate,\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}