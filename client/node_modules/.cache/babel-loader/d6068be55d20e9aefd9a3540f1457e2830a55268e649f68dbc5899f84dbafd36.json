{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nconst useGuestHouse = () => {\n  _s();\n  const [iserror, setError] = useState(null);\n  const [isloading, setLoading] = useState(null);\n  const {\n    dispatch,\n    user\n  } = useAuthContext();\n  const location = useNavigate();\n  const GuestHouse = async ({\n    OwnerEmail,\n    OwnerName,\n    MaxGuest,\n    Room,\n    Kitchen,\n    RentAmount,\n    LimitDays,\n    Address,\n    HouseImg\n  }) => {\n    console.log({\n      OwnerEmail,\n      OwnerName,\n      MaxGuest,\n      Room,\n      Kitchen,\n      RentAmount,\n      LimitDays,\n      Address,\n      HouseImg\n    });\n    setError(null);\n    setLoading(true);\n    const Fetch = await fetch(`http://localhost:4000/guesthousedata`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${user.token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        OwnerEmail,\n        OwnerName,\n        MaxGuest,\n        Room,\n        Kitchen,\n        RentAmount,\n        LimitDays,\n        Address,\n        HouseImg\n      })\n    });\n    const JsonData = await Fetch.json();\n    console.log(JsonData);\n    if (!Fetch.ok) {\n      // Handle the Error because if the user is not available\n      setError(JsonData.Error);\n      toast.error(iserror);\n    } else {\n      // Save the user to localStorage for authentication purpose\n      setLoading(false);\n      toast.success(\"Successfully Saved\");\n      location(`/ownerhome`);\n    }\n  };\n  return {\n    GuestHouse,\n    isloading,\n    iserror\n  };\n};\n_s(useGuestHouse, \"tekAbJK6eQ1MURRi5TMbjVGjzg4=\", false, function () {\n  return [useAuthContext, useNavigate];\n});\nexport default useGuestHouse;","map":{"version":3,"names":["useState","useAuthContext","useNavigate","toast","useGuestHouse","_s","iserror","setError","isloading","setLoading","dispatch","user","location","GuestHouse","OwnerEmail","OwnerName","MaxGuest","Room","Kitchen","RentAmount","LimitDays","Address","HouseImg","console","log","Fetch","fetch","method","headers","token","body","JSON","stringify","JsonData","json","ok","Error","error","success"],"sources":["C:/NewPrac/Prac/client/src/hooks/useGuestHouse.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useAuthContext } from './useAuthContext';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { toast } from 'react-toastify';\r\nconst useGuestHouse = () => {\r\n    const [iserror, setError] = useState(null);\r\n    const [isloading, setLoading] = useState(null);\r\n    const { dispatch, user } = useAuthContext();\r\n    const location = useNavigate();\r\n    const GuestHouse = async ({ OwnerEmail, OwnerName,  MaxGuest, Room, Kitchen, RentAmount, LimitDays, Address, HouseImg }) => {\r\n        console.log({ OwnerEmail, OwnerName,  MaxGuest, Room, Kitchen, RentAmount, LimitDays, Address, HouseImg });\r\n        setError(null);\r\n        setLoading(true);\r\n        const Fetch = await fetch(`http://localhost:4000/guesthousedata`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\" : `Bearer ${user.token}`,\r\n                \"Content-Type\": \"application/json\",\r\n\r\n            },\r\n            body: JSON.stringify({ OwnerEmail, OwnerName,  MaxGuest, Room, Kitchen, RentAmount, LimitDays, Address, HouseImg })\r\n        });\r\n\r\n        const JsonData = await Fetch.json();\r\n        console.log(JsonData);\r\n        if (!Fetch.ok) {\r\n            // Handle the Error because if the user is not available\r\n            setError(JsonData.Error);\r\n            toast.error(iserror)\r\n        } else {\r\n            // Save the user to localStorage for authentication purpose\r\n            setLoading(false);\r\n            toast.success(\"Successfully Saved\")\r\n            location(`/ownerhome`);\r\n        }\r\n    }\r\n    return { GuestHouse, isloading, iserror };\r\n}\r\n\r\n\r\nexport default useGuestHouse"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,SAAS,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM;IAAEU,QAAQ;IAAEC;EAAK,CAAC,GAAGV,cAAc,CAAC,CAAC;EAC3C,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,UAAU,GAAG,MAAAA,CAAO;IAAEC,UAAU;IAAEC,SAAS;IAAGC,QAAQ;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAS,CAAC,KAAK;IACxHC,OAAO,CAACC,GAAG,CAAC;MAAEV,UAAU;MAAEC,SAAS;MAAGC,QAAQ;MAAEC,IAAI;MAAEC,OAAO;MAAEC,UAAU;MAAEC,SAAS;MAAEC,OAAO;MAAEC;IAAS,CAAC,CAAC;IAC1Gf,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMgB,KAAK,GAAG,MAAMC,KAAK,CAAE,sCAAqC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,eAAe,EAAI,UAASjB,IAAI,CAACkB,KAAM,EAAC;QACxC,cAAc,EAAE;MAEpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAElB,UAAU;QAAEC,SAAS;QAAGC,QAAQ;QAAEC,IAAI;QAAEC,OAAO;QAAEC,UAAU;QAAEC,SAAS;QAAEC,OAAO;QAAEC;MAAS,CAAC;IACtH,CAAC,CAAC;IAEF,MAAMW,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,CAAC;IACnCX,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC;IACrB,IAAI,CAACR,KAAK,CAACU,EAAE,EAAE;MACX;MACA5B,QAAQ,CAAC0B,QAAQ,CAACG,KAAK,CAAC;MACxBjC,KAAK,CAACkC,KAAK,CAAC/B,OAAO,CAAC;IACxB,CAAC,MAAM;MACH;MACAG,UAAU,CAAC,KAAK,CAAC;MACjBN,KAAK,CAACmC,OAAO,CAAC,oBAAoB,CAAC;MACnC1B,QAAQ,CAAE,YAAW,CAAC;IAC1B;EACJ,CAAC;EACD,OAAO;IAAEC,UAAU;IAAEL,SAAS;IAAEF;EAAQ,CAAC;AAC7C,CAAC;AAAAD,EAAA,CAjCKD,aAAa;EAAA,QAGYH,cAAc,EACxBC,WAAW;AAAA;AAgChC,eAAeE,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}