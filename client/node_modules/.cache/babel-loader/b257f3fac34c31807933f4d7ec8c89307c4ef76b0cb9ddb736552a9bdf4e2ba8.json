{"ast":null,"code":"/* eslint-disable */\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfunction utf8Encode(str) {\n  for (let n = 0; n < str.length; n++) {\n    const c = str.charCodeAt(n);\n    if (c >= 128) {\n      throw new Error('ASCII only support');\n    }\n  }\n  return str;\n}\nexport const base64Decode = input => {\n  let output = '';\n  let chr1, chr2, chr3;\n  let enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n  while (i < input.length) {\n    enc1 = _keyStr.indexOf(input.charAt(i++));\n    enc2 = _keyStr.indexOf(input.charAt(i++));\n    enc3 = _keyStr.indexOf(input.charAt(i++));\n    enc4 = _keyStr.indexOf(input.charAt(i++));\n    chr1 = enc1 << 2 | enc2 >> 4;\n    chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n    chr3 = (enc3 & 3) << 6 | enc4;\n    output = output + String.fromCharCode(chr1);\n    if (enc3 != 64) {\n      output = output + String.fromCharCode(chr2);\n    }\n    if (enc4 != 64) {\n      output = output + String.fromCharCode(chr3);\n    }\n  }\n  return output;\n};\nexport const base64Encode = input => {\n  let output = '';\n  let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = utf8Encode(input);\n  while (i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n  return output;\n};","map":{"version":3,"names":["_keyStr","utf8Encode","str","n","length","c","charCodeAt","Error","base64Decode","input","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","replace","indexOf","charAt","String","fromCharCode","base64Encode","isNaN"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-license-pro/encoding/base64.js"],"sourcesContent":["/* eslint-disable */\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfunction utf8Encode(str) {\n  for (let n = 0; n < str.length; n++) {\n    const c = str.charCodeAt(n);\n    if (c >= 128) {\n      throw new Error('ASCII only support');\n    }\n  }\n  return str;\n}\nexport const base64Decode = input => {\n  let output = '';\n  let chr1, chr2, chr3;\n  let enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n  while (i < input.length) {\n    enc1 = _keyStr.indexOf(input.charAt(i++));\n    enc2 = _keyStr.indexOf(input.charAt(i++));\n    enc3 = _keyStr.indexOf(input.charAt(i++));\n    enc4 = _keyStr.indexOf(input.charAt(i++));\n    chr1 = enc1 << 2 | enc2 >> 4;\n    chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n    chr3 = (enc3 & 3) << 6 | enc4;\n    output = output + String.fromCharCode(chr1);\n    if (enc3 != 64) {\n      output = output + String.fromCharCode(chr2);\n    }\n    if (enc4 != 64) {\n      output = output + String.fromCharCode(chr3);\n    }\n  }\n  return output;\n};\nexport const base64Encode = input => {\n  let output = '';\n  let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  let i = 0;\n  input = utf8Encode(input);\n  while (i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n  return output;\n};"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,mEAAmE;AACnF,SAASC,UAAUA,CAACC,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,MAAME,CAAC,GAAGH,GAAG,CAACI,UAAU,CAACH,CAAC,CAAC;IAC3B,IAAIE,CAAC,IAAI,GAAG,EAAE;MACZ,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;IACvC;EACF;EACA,OAAOL,GAAG;AACZ;AACA,OAAO,MAAMM,YAAY,GAAGC,KAAK,IAAI;EACnC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,IAAI,EAAEC,IAAI,EAAEC,IAAI;EACpB,IAAIC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI;EAC1B,IAAIC,CAAC,GAAG,CAAC;EACTT,KAAK,GAAGA,KAAK,CAACU,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC;EAChD,OAAOD,CAAC,GAAGT,KAAK,CAACL,MAAM,EAAE;IACvBU,IAAI,GAAGd,OAAO,CAACoB,OAAO,CAACX,KAAK,CAACY,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;IACzCH,IAAI,GAAGf,OAAO,CAACoB,OAAO,CAACX,KAAK,CAACY,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;IACzCF,IAAI,GAAGhB,OAAO,CAACoB,OAAO,CAACX,KAAK,CAACY,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;IACzCD,IAAI,GAAGjB,OAAO,CAACoB,OAAO,CAACX,KAAK,CAACY,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;IACzCP,IAAI,GAAGG,IAAI,IAAI,CAAC,GAAGC,IAAI,IAAI,CAAC;IAC5BH,IAAI,GAAG,CAACG,IAAI,GAAG,EAAE,KAAK,CAAC,GAAGC,IAAI,IAAI,CAAC;IACnCH,IAAI,GAAG,CAACG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAGC,IAAI;IAC7BP,MAAM,GAAGA,MAAM,GAAGY,MAAM,CAACC,YAAY,CAACZ,IAAI,CAAC;IAC3C,IAAIK,IAAI,IAAI,EAAE,EAAE;MACdN,MAAM,GAAGA,MAAM,GAAGY,MAAM,CAACC,YAAY,CAACX,IAAI,CAAC;IAC7C;IACA,IAAIK,IAAI,IAAI,EAAE,EAAE;MACdP,MAAM,GAAGA,MAAM,GAAGY,MAAM,CAACC,YAAY,CAACV,IAAI,CAAC;IAC7C;EACF;EACA,OAAOH,MAAM;AACf,CAAC;AACD,OAAO,MAAMc,YAAY,GAAGf,KAAK,IAAI;EACnC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI;EAC5C,IAAIC,CAAC,GAAG,CAAC;EACTT,KAAK,GAAGR,UAAU,CAACQ,KAAK,CAAC;EACzB,OAAOS,CAAC,GAAGT,KAAK,CAACL,MAAM,EAAE;IACvBO,IAAI,GAAGF,KAAK,CAACH,UAAU,CAACY,CAAC,EAAE,CAAC;IAC5BN,IAAI,GAAGH,KAAK,CAACH,UAAU,CAACY,CAAC,EAAE,CAAC;IAC5BL,IAAI,GAAGJ,KAAK,CAACH,UAAU,CAACY,CAAC,EAAE,CAAC;IAC5BJ,IAAI,GAAGH,IAAI,IAAI,CAAC;IAChBI,IAAI,GAAG,CAACJ,IAAI,GAAG,CAAC,KAAK,CAAC,GAAGC,IAAI,IAAI,CAAC;IAClCI,IAAI,GAAG,CAACJ,IAAI,GAAG,EAAE,KAAK,CAAC,GAAGC,IAAI,IAAI,CAAC;IACnCI,IAAI,GAAGJ,IAAI,GAAG,EAAE;IAChB,IAAIY,KAAK,CAACb,IAAI,CAAC,EAAE;MACfI,IAAI,GAAGC,IAAI,GAAG,EAAE;IAClB,CAAC,MAAM,IAAIQ,KAAK,CAACZ,IAAI,CAAC,EAAE;MACtBI,IAAI,GAAG,EAAE;IACX;IACAP,MAAM,GAAGA,MAAM,GAAGV,OAAO,CAACqB,MAAM,CAACP,IAAI,CAAC,GAAGd,OAAO,CAACqB,MAAM,CAACN,IAAI,CAAC,GAAGf,OAAO,CAACqB,MAAM,CAACL,IAAI,CAAC,GAAGhB,OAAO,CAACqB,MAAM,CAACJ,IAAI,CAAC;EAC7G;EACA,OAAOP,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}