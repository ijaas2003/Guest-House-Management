{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { validateTime } from '../internals/utils/validation/validateTime';\nimport { ClockIcon } from '../icons';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDigitalClockTimeView, renderMultiSectionDigitalClockTimeView } from '../timeViewRenderers';\nimport { resolveTimeFormat } from '../internals/utils/time-utils';\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  var _defaultizedProps$thr, _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;\n  const localeText = useLocaleText();\n  const utils = useUtils();\n\n  // Props with the default values common to all time pickers\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const thresholdToRenderTimeInASingleColumn = (_defaultizedProps$thr = defaultizedProps.thresholdToRenderTimeInASingleColumn) != null ? _defaultizedProps$thr : 24;\n  const timeSteps = _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, defaultizedProps.timeSteps);\n  const shouldRenderTimeInASingleColumn = 24 * 60 / (timeSteps.hours * timeSteps.minutes) <= thresholdToRenderTimeInASingleColumn;\n  const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;\n  const viewRenderers = _extends({\n    hours: renderTimeView,\n    minutes: renderTimeView,\n    seconds: renderTimeView,\n    meridiem: renderTimeView\n  }, defaultizedProps.viewRenderers);\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\n  const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept'];\n  // Need to avoid adding the `meridiem` view when unexpected renderer is specified\n  const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;\n  const views = defaultizedProps.ampm && shouldHoursRendererContainMeridiemView ? [...defaultizedProps.views, 'meridiem'] : defaultizedProps.views;\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    timeSteps,\n    viewRenderers,\n    format: resolveTimeFormat(utils, defaultizedProps),\n    // Setting only `hours` time view in case of single column time picker\n    // Allows for easy view lifecycle management\n    views: shouldRenderTimeInASingleColumn ? ['hours'] : views,\n    slots: _extends({\n      field: TimeField,\n      openPickerIcon: ClockIcon\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),\n      actionBar: _extends({\n        actions: actionBarActions\n      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nDesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { DesktopTimePicker };","map":{"version":3,"names":["_extends","React","PropTypes","resolveComponentProps","refType","singleItemValueManager","TimeField","useTimePickerDefaultizedProps","useLocaleText","useUtils","validateTime","ClockIcon","useDesktopPicker","extractValidationProps","renderDigitalClockTimeView","renderMultiSectionDigitalClockTimeView","resolveTimeFormat","DesktopTimePicker","forwardRef","inProps","ref","_defaultizedProps$thr","_defaultizedProps$amp","_viewRenderers$hours","_defaultizedProps$slo2","_defaultizedProps$slo3","_props$localeText$ope","_props$localeText","localeText","utils","defaultizedProps","thresholdToRenderTimeInASingleColumn","timeSteps","hours","minutes","seconds","shouldRenderTimeInASingleColumn","renderTimeView","viewRenderers","meridiem","ampmInClock","actionBarActions","shouldHoursRendererContainMeridiemView","name","views","ampm","props","format","slots","field","openPickerIcon","slotProps","ownerState","_defaultizedProps$slo","toolbar","hidden","actionBar","actions","renderPicker","valueManager","valueType","getOpenDialogAriaText","openTimePickerDialogue","validator","propTypes","bool","autoFocus","className","string","closeOnSelect","components","object","componentsProps","defaultValue","any","disabled","disableFuture","disableIgnoringDatePartForTimeValidation","disableOpenPicker","disablePast","formatDensity","oneOf","inputRef","label","node","maxTime","minTime","minutesStep","number","onAccept","func","onChange","onClose","onError","onOpen","onSelectedSectionsChange","onViewChange","open","openTo","orientation","readOnly","reduceAnimations","referenceDate","selectedSections","oneOfType","shape","endIndex","isRequired","startIndex","shouldDisableClock","shouldDisableTime","skipDisabled","sx","arrayOf","timezone","value","view"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers/DesktopTimePicker/DesktopTimePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { validateTime } from '../internals/utils/validation/validateTime';\nimport { ClockIcon } from '../icons';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDigitalClockTimeView, renderMultiSectionDigitalClockTimeView } from '../timeViewRenderers';\nimport { resolveTimeFormat } from '../internals/utils/time-utils';\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  var _defaultizedProps$thr, _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;\n  const localeText = useLocaleText();\n  const utils = useUtils();\n\n  // Props with the default values common to all time pickers\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const thresholdToRenderTimeInASingleColumn = (_defaultizedProps$thr = defaultizedProps.thresholdToRenderTimeInASingleColumn) != null ? _defaultizedProps$thr : 24;\n  const timeSteps = _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, defaultizedProps.timeSteps);\n  const shouldRenderTimeInASingleColumn = 24 * 60 / (timeSteps.hours * timeSteps.minutes) <= thresholdToRenderTimeInASingleColumn;\n  const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;\n  const viewRenderers = _extends({\n    hours: renderTimeView,\n    minutes: renderTimeView,\n    seconds: renderTimeView,\n    meridiem: renderTimeView\n  }, defaultizedProps.viewRenderers);\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\n  const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept'];\n  // Need to avoid adding the `meridiem` view when unexpected renderer is specified\n  const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;\n  const views = defaultizedProps.ampm && shouldHoursRendererContainMeridiemView ? [...defaultizedProps.views, 'meridiem'] : defaultizedProps.views;\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    timeSteps,\n    viewRenderers,\n    format: resolveTimeFormat(utils, defaultizedProps),\n    // Setting only `hours` time view in case of single column time picker\n    // Allows for easy view lifecycle management\n    views: shouldRenderTimeInASingleColumn ? ['hours'] : views,\n    slots: _extends({\n      field: TimeField,\n      openPickerIcon: ClockIcon\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),\n      actionBar: _extends({\n        actions: actionBarActions\n      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nDesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { DesktopTimePicker };"],"mappings":"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EC,eAAe,EAAEtE,SAAS,CAACqE,MAAM;EACjC;AACF;AACA;AACA;EACEE,YAAY,EAAEvE,SAAS,CAACwE,GAAG;EAC3B;AACF;AACA;AACA;EACEC,QAAQ,EAAEzE,SAAS,CAAC+D,IAAI;EACxB;AACF;AACA;AACA;EACEW,aAAa,EAAE1E,SAAS,CAAC+D,IAAI;EAC7B;AACF;AACA;AACA;EACEY,wCAAwC,EAAE3E,SAAS,CAAC+D,IAAI;EACxD;AACF;AACA;AACA;EACEa,iBAAiB,EAAE5E,SAAS,CAAC+D,IAAI;EACjC;AACF;AACA;AACA;EACEc,WAAW,EAAE7E,SAAS,CAAC+D,IAAI;EAC3B;AACF;AACA;AACA;EACElB,MAAM,EAAE7C,SAAS,CAACkE,MAAM;EACxB;AACF;AACA;AACA;AACA;EACEY,aAAa,EAAE9E,SAAS,CAAC+E,KAAK,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;EACrD;AACF;AACA;EACEC,QAAQ,EAAE9E,OAAO;EACjB;AACF;AACA;EACE+E,KAAK,EAAEjF,SAAS,CAACkF,IAAI;EACrB;AACF;AACA;AACA;EACExD,UAAU,EAAE1B,SAAS,CAACqE,MAAM;EAC5B;AACF;AACA;AACA;EACEc,OAAO,EAAEnF,SAAS,CAACwE,GAAG;EACtB;AACF;AACA;AACA;EACEY,OAAO,EAAEpF,SAAS,CAACwE,GAAG;EACtB;AACF;AACA;AACA;EACEa,WAAW,EAAErF,SAAS,CAACsF,MAAM;EAC7B;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAEvF,SAAS,CAACwF,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAEzF,SAAS,CAACwF,IAAI;EACxB;AACF;AACA;AACA;EACEE,OAAO,EAAE1F,SAAS,CAACwF,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,OAAO,EAAE3F,SAAS,CAACwF,IAAI;EACvB;AACF;AACA;AACA;EACEI,MAAM,EAAE5F,SAAS,CAACwF,IAAI;EACtB;AACF;AACA;AACA;EACEK,wBAAwB,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}