{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\", \"clearable\", \"onClear\", \"disabled\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport var useField = function useField(params) {\n  var utils = useUtils();\n  var _useFieldState = useFieldState(params),\n    state = _useFieldState.state,\n    selectedSectionIndexes = _useFieldState.selectedSectionIndexes,\n    _setSelectedSections = _useFieldState.setSelectedSections,\n    clearValue = _useFieldState.clearValue,\n    clearActiveSection = _useFieldState.clearActiveSection,\n    updateSectionValue = _useFieldState.updateSectionValue,\n    updateValueFromValueStr = _useFieldState.updateValueFromValueStr,\n    setTempAndroidValueStr = _useFieldState.setTempAndroidValueStr,\n    sectionsValueBoundaries = _useFieldState.sectionsValueBoundaries,\n    placeholder = _useFieldState.placeholder,\n    timezone = _useFieldState.timezone;\n  var inputRefProp = params.inputRef,\n    internalProps = params.internalProps,\n    _params$internalProps = params.internalProps,\n    _params$internalProps2 = _params$internalProps.readOnly,\n    readOnly = _params$internalProps2 === void 0 ? false : _params$internalProps2,\n    unstableFieldRef = _params$internalProps.unstableFieldRef,\n    minutesStep = _params$internalProps.minutesStep,\n    _params$forwardedProp = params.forwardedProps,\n    onClick = _params$forwardedProp.onClick,\n    onKeyDown = _params$forwardedProp.onKeyDown,\n    onFocus = _params$forwardedProp.onFocus,\n    onBlur = _params$forwardedProp.onBlur,\n    onMouseUp = _params$forwardedProp.onMouseUp,\n    onPaste = _params$forwardedProp.onPaste,\n    error = _params$forwardedProp.error,\n    clearable = _params$forwardedProp.clearable,\n    onClear = _params$forwardedProp.onClear,\n    disabled = _params$forwardedProp.disabled,\n    fieldValueManager = params.fieldValueManager,\n    valueManager = params.valueManager,\n    validator = params.validator,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  var _useFieldCharacterEdi = useFieldCharacterEditing({\n      sections: state.sections,\n      updateSectionValue: updateSectionValue,\n      sectionsValueBoundaries: sectionsValueBoundaries,\n      setTempAndroidValueStr: setTempAndroidValueStr,\n      timezone: timezone\n    }),\n    applyCharacterEditing = _useFieldCharacterEdi.applyCharacterEditing,\n    resetCharacterQuery = _useFieldCharacterEdi.resetCharacterQuery;\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(inputRefProp, inputRef);\n  var focusTimeoutRef = React.useRef(undefined);\n  var theme = useTheme();\n  var isRTL = theme.direction === 'rtl';\n  var sectionOrder = React.useMemo(function () {\n    return getSectionOrder(state.sections, isRTL);\n  }, [state.sections, isRTL]);\n  var syncSelectionFromDOM = function syncSelectionFromDOM() {\n    var _selectionStart;\n    if (readOnly) {\n      _setSelectedSections(null);\n      return;\n    }\n    var browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    var nextSectionIndex;\n    if (browserStartIndex <= state.sections[0].startInInput) {\n      // Special case if browser index is in invisible characters at the beginning\n      nextSectionIndex = 1;\n    } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {\n      // If the click is after the last character of the input, then we want to select the 1st section.\n      nextSectionIndex = 1;\n    } else {\n      nextSectionIndex = state.sections.findIndex(function (section) {\n        return section.startInInput - section.startSeparator.length > browserStartIndex;\n      });\n    }\n    var sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    _setSelectedSections(sectionIndex);\n  };\n  var handleInputClick = useEventCallback(function (event) {\n    // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.\n    // We avoid this by checking if the call of `handleInputClick` is actually intended, or a side effect.\n    if (event.isDefaultPrevented()) {\n      return;\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    onClick == null || onClick.apply(void 0, [event].concat(args));\n    syncSelectionFromDOM();\n  });\n  var handleInputMouseUp = useEventCallback(function (event) {\n    onMouseUp == null || onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  var handleInputFocus = useEventCallback(function () {\n    onFocus == null || onFocus.apply(void 0, arguments);\n    // The ref is guaranteed to be resolved at this point.\n    var input = inputRef.current;\n    window.clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(function () {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        _setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  var handleInputBlur = useEventCallback(function () {\n    onBlur == null || onBlur.apply(void 0, arguments);\n    _setSelectedSections(null);\n  });\n  var handleInputPaste = useEventCallback(function (event) {\n    onPaste == null || onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    var pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      var activeSection = state.sections[selectedSectionIndexes.startIndex];\n      var lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      var digitsOnly = /^[0-9]+$/.test(pastedValue);\n      var digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);\n      var isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    resetCharacterQuery();\n    updateValueFromValueStr(pastedValue);\n  });\n  var handleInputChange = useEventCallback(function (event) {\n    if (readOnly) {\n      return;\n    }\n    var targetValue = event.target.value;\n    var eventData = event.nativeEvent.data;\n    // Calling `.fill(04/11/2022)` in playwright will trigger a change event with the requested content to insert in `event.nativeEvent.data`\n    // usual changes have only the currently typed character in the `event.nativeEvent.data`\n    var shouldUseEventData = eventData && eventData.length > 1;\n    var valueStr = shouldUseEventData ? eventData : targetValue;\n    var cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected or eventData should be used, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null || shouldUseEventData) {\n      updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);\n      return;\n    }\n    var keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      var prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));\n      var startOfDiffIndex = -1;\n      var endOfDiffIndex = -1;\n      for (var i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      var activeSection = state.sections[selectedSectionIndexes.startIndex];\n      var hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      var activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed: keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  var handleInputKeyDown = useEventCallback(function (event) {\n    onKeyDown == null || onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          _setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            _setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            _setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            var nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              _setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            _setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            _setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            var _nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (_nextSectionIndex !== null) {\n              _setSelectedSections(_nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          var activeSection = state.sections[selectedSectionIndexes.startIndex];\n          var activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          var newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {\n            minutesStep: minutesStep\n          });\n          updateSectionValue({\n            activeSection: activeSection,\n            newSectionValue: newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(function () {\n    if (!inputRef.current) {\n      return;\n    }\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    var firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    var lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    var selectionStart = firstSelectedSection.startInInput;\n    var selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      var currentScrollTop = inputRef.current.scrollTop;\n      // On multi input range pickers we want to update selection range only for the active input\n      // This helps avoiding the focus jumping on Safari https://github.com/mui/mui-x/issues/9003\n      // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425\n      if (inputRef.current === getActiveElement(document)) {\n        inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      }\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  var validationError = useValidation(_extends({}, internalProps, {\n    value: state.value,\n    timezone: timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  var inputError = React.useMemo(function () {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(function () {\n    if (!inputError && !selectedSectionIndexes) {\n      resetCharacterQuery();\n    }\n  }, [state.referenceValue, selectedSectionIndexes, inputError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(function () {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      _setSelectedSections('all');\n    }\n    return function () {\n      return window.clearTimeout(focusTimeoutRef.current);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(function () {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var valueStr = React.useMemo(function () {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);\n  var inputMode = React.useMemo(function () {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'numeric';\n  }, [selectedSectionIndexes, state.sections]);\n  var inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  var areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  var shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;\n  React.useImperativeHandle(unstableFieldRef, function () {\n    return {\n      getSections: function getSections() {\n        return state.sections;\n      },\n      getActiveSectionIndex: function getActiveSectionIndex() {\n        var _selectionStart2, _selectionEnd;\n        var browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n        var browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n        if (browserStartIndex === 0 && browserEndIndex === 0) {\n          return null;\n        }\n        var nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n        : state.sections.findIndex(function (section) {\n          return section.startInInput - section.startSeparator.length > browserStartIndex;\n        });\n        return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n      },\n      setSelectedSections: function setSelectedSections(activeSectionIndex) {\n        return _setSelectedSections(activeSectionIndex);\n      }\n    };\n  });\n  var handleClearValue = useEventCallback(function (event) {\n    var _inputRef$current;\n    event.preventDefault();\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    onClear == null || onClear.apply(void 0, [event].concat(args));\n    clearValue();\n    inputRef == null || (_inputRef$current = inputRef.current) == null || _inputRef$current.focus();\n    _setSelectedSections(0);\n  });\n  return _extends({\n    placeholder: placeholder,\n    autoComplete: 'off',\n    disabled: Boolean(disabled)\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode: inputMode,\n    readOnly: readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    onClear: handleClearValue,\n    error: inputError,\n    ref: handleRef,\n    clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)\n  });\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useEnhancedEffect","useEventCallback","useForkRef","useTheme","useValidation","useUtils","adjustSectionValue","isAndroid","cleanString","getSectionOrder","useFieldState","useFieldCharacterEditing","getActiveElement","useField","params","utils","_useFieldState","state","selectedSectionIndexes","setSelectedSections","clearValue","clearActiveSection","updateSectionValue","updateValueFromValueStr","setTempAndroidValueStr","sectionsValueBoundaries","placeholder","timezone","inputRefProp","inputRef","internalProps","_params$internalProps","_params$internalProps2","readOnly","unstableFieldRef","minutesStep","_params$forwardedProp","forwardedProps","onClick","onKeyDown","onFocus","onBlur","onMouseUp","onPaste","error","clearable","onClear","disabled","fieldValueManager","valueManager","validator","otherForwardedProps","_useFieldCharacterEdi","sections","applyCharacterEditing","resetCharacterQuery","useRef","handleRef","focusTimeoutRef","undefined","theme","isRTL","direction","sectionOrder","useMemo","syncSelectionFromDOM","_selectionStart","browserStartIndex","current","selectionStart","nextSectionIndex","startInInput","length","endInInput","findIndex","section","startSeparator","sectionIndex","handleInputClick","event","isDefaultPrevented","_len","arguments","args","Array","_key","apply","concat","handleInputMouseUp","preventDefault","handleInputFocus","input","window","clearTimeout","setTimeout","value","Number","selectionEnd","handleInputBlur","handleInputPaste","pastedValue","clipboardData","getData","startIndex","endIndex","activeSection","lettersOnly","test","digitsOnly","digitsAndLetterOnly","isValidPastedValue","contentType","handleInputChange","targetValue","target","eventData","nativeEvent","data","shouldUseEventData","valueStr","cleanValueStr","keyPressed","prevValueStr","getValueStrFromSections","startOfDiffIndex","endOfDiffIndex","i","hasDiffOutsideOfActiveSection","start","end","activeSectionEndRelativeToNewValue","endSeparator","slice","handleInputKeyDown","key","ctrlKey","metaKey","neighbors","rightIndex","leftIndex","includes","activeDateManager","getActiveDateManager","newSectionValue","date","shouldGoToNextSection","scrollLeft","firstSelectedSection","lastSelectedSection","shouldSelectBoundarySelectors","currentScrollTop","scrollTop","document","setSelectionRange","validationError","isSameError","defaultErrorState","inputError","hasError","useEffect","referenceValue","activeElement","tempValueStrAndroid","_state$tempValueStrAn","inputMode","inputHasFocus","areAllSectionsEmpty","areValuesEqual","emptyValue","shouldShowPlaceholder","useImperativeHandle","getSections","getActiveSectionIndex","_selectionStart2","_selectionEnd","browserEndIndex","activeSectionIndex","handleClearValue","_inputRef$current","_len2","_key2","focus","autoComplete","Boolean","onChange","ref"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\", \"clearable\", \"onClear\", \"disabled\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport const useField = params => {\n  const utils = useUtils();\n  const {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder,\n    timezone\n  } = useFieldState(params);\n  const {\n      inputRef: inputRefProp,\n      internalProps,\n      internalProps: {\n        readOnly = false,\n        unstableFieldRef,\n        minutesStep\n      },\n      forwardedProps: {\n        onClick,\n        onKeyDown,\n        onFocus,\n        onBlur,\n        onMouseUp,\n        onPaste,\n        error,\n        clearable,\n        onClear,\n        disabled\n      },\n      fieldValueManager,\n      valueManager,\n      validator\n    } = params,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  const {\n    applyCharacterEditing,\n    resetCharacterQuery\n  } = useFieldCharacterEditing({\n    sections: state.sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    setTempAndroidValueStr,\n    timezone\n  });\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(inputRefProp, inputRef);\n  const focusTimeoutRef = React.useRef(undefined);\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const sectionOrder = React.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);\n  const syncSelectionFromDOM = () => {\n    var _selectionStart;\n    if (readOnly) {\n      setSelectedSections(null);\n      return;\n    }\n    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    let nextSectionIndex;\n    if (browserStartIndex <= state.sections[0].startInInput) {\n      // Special case if browser index is in invisible characters at the beginning\n      nextSectionIndex = 1;\n    } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {\n      // If the click is after the last character of the input, then we want to select the 1st section.\n      nextSectionIndex = 1;\n    } else {\n      nextSectionIndex = state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n    }\n    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    setSelectedSections(sectionIndex);\n  };\n  const handleInputClick = useEventCallback((event, ...args) => {\n    // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.\n    // We avoid this by checking if the call of `handleInputClick` is actually intended, or a side effect.\n    if (event.isDefaultPrevented()) {\n      return;\n    }\n    onClick == null || onClick(event, ...args);\n    syncSelectionFromDOM();\n  });\n  const handleInputMouseUp = useEventCallback(event => {\n    onMouseUp == null || onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  const handleInputFocus = useEventCallback((...args) => {\n    onFocus == null || onFocus(...args);\n    // The ref is guaranteed to be resolved at this point.\n    const input = inputRef.current;\n    window.clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(() => {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  const handleInputBlur = useEventCallback((...args) => {\n    onBlur == null || onBlur(...args);\n    setSelectedSections(null);\n  });\n  const handleInputPaste = useEventCallback(event => {\n    onPaste == null || onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    const pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      const digitsOnly = /^[0-9]+$/.test(pastedValue);\n      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);\n      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    resetCharacterQuery();\n    updateValueFromValueStr(pastedValue);\n  });\n  const handleInputChange = useEventCallback(event => {\n    if (readOnly) {\n      return;\n    }\n    const targetValue = event.target.value;\n    const eventData = event.nativeEvent.data;\n    // Calling `.fill(04/11/2022)` in playwright will trigger a change event with the requested content to insert in `event.nativeEvent.data`\n    // usual changes have only the currently typed character in the `event.nativeEvent.data`\n    const shouldUseEventData = eventData && eventData.length > 1;\n    const valueStr = shouldUseEventData ? eventData : targetValue;\n    const cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected or eventData should be used, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null || shouldUseEventData) {\n      updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);\n      return;\n    }\n    let keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));\n      let startOfDiffIndex = -1;\n      let endOfDiffIndex = -1;\n      for (let i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  const handleInputKeyDown = useEventCallback(event => {\n    onKeyDown == null || onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          const activeSection = state.sections[selectedSectionIndexes.startIndex];\n          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {\n            minutesStep\n          });\n          updateSectionValue({\n            activeSection,\n            newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(() => {\n    if (!inputRef.current) {\n      return;\n    }\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    let selectionStart = firstSelectedSection.startInInput;\n    let selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      const currentScrollTop = inputRef.current.scrollTop;\n      // On multi input range pickers we want to update selection range only for the active input\n      // This helps avoiding the focus jumping on Safari https://github.com/mui/mui-x/issues/9003\n      // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425\n      if (inputRef.current === getActiveElement(document)) {\n        inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      }\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  const validationError = useValidation(_extends({}, internalProps, {\n    value: state.value,\n    timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const inputError = React.useMemo(() => {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(() => {\n    if (!inputError && !selectedSectionIndexes) {\n      resetCharacterQuery();\n    }\n  }, [state.referenceValue, selectedSectionIndexes, inputError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      setSelectedSections('all');\n    }\n    return () => window.clearTimeout(focusTimeoutRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(() => {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const valueStr = React.useMemo(() => {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);\n  const inputMode = React.useMemo(() => {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'numeric';\n  }, [selectedSectionIndexes, state.sections]);\n  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;\n  React.useImperativeHandle(unstableFieldRef, () => ({\n    getSections: () => state.sections,\n    getActiveSectionIndex: () => {\n      var _selectionStart2, _selectionEnd;\n      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n      if (browserStartIndex === 0 && browserEndIndex === 0) {\n        return null;\n      }\n      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n      : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    },\n    setSelectedSections: activeSectionIndex => setSelectedSections(activeSectionIndex)\n  }));\n  const handleClearValue = useEventCallback((event, ...args) => {\n    var _inputRef$current;\n    event.preventDefault();\n    onClear == null || onClear(event, ...args);\n    clearValue();\n    inputRef == null || (_inputRef$current = inputRef.current) == null || _inputRef$current.focus();\n    setSelectedSections(0);\n  });\n  return _extends({\n    placeholder,\n    autoComplete: 'off',\n    disabled: Boolean(disabled)\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode,\n    readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    onClear: handleClearValue,\n    error: inputError,\n    ref: handleRef,\n    clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)\n  });\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,IAAMC,SAAS,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,CAAC;AACpI,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,kBAAkB,EAAEC,SAAS,EAAEC,WAAW,EAAEC,eAAe,QAAQ,kBAAkB;AAC9F,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAGC,MAAM,EAAI;EAChC,IAAMC,KAAK,GAAGV,QAAQ,CAAC,CAAC;EACxB,IAAAW,cAAA,GAYIN,aAAa,CAACI,MAAM,CAAC;IAXvBG,KAAK,GAAAD,cAAA,CAALC,KAAK;IACLC,sBAAsB,GAAAF,cAAA,CAAtBE,sBAAsB;IACtBC,oBAAmB,GAAAH,cAAA,CAAnBG,mBAAmB;IACnBC,UAAU,GAAAJ,cAAA,CAAVI,UAAU;IACVC,kBAAkB,GAAAL,cAAA,CAAlBK,kBAAkB;IAClBC,kBAAkB,GAAAN,cAAA,CAAlBM,kBAAkB;IAClBC,uBAAuB,GAAAP,cAAA,CAAvBO,uBAAuB;IACvBC,sBAAsB,GAAAR,cAAA,CAAtBQ,sBAAsB;IACtBC,uBAAuB,GAAAT,cAAA,CAAvBS,uBAAuB;IACvBC,WAAW,GAAAV,cAAA,CAAXU,WAAW;IACXC,QAAQ,GAAAX,cAAA,CAARW,QAAQ;EAEV,IACcC,YAAY,GAsBpBd,MAAM,CAtBRe,QAAQ;IACRC,aAAa,GAqBXhB,MAAM,CArBRgB,aAAa;IAAAC,qBAAA,GAqBXjB,MAAM,CApBRgB,aAAa;IAAAE,sBAAA,GAAAD,qBAAA,CACXE,QAAQ;IAARA,QAAQ,GAAAD,sBAAA,cAAG,KAAK,GAAAA,sBAAA;IAChBE,gBAAgB,GAAAH,qBAAA,CAAhBG,gBAAgB;IAChBC,WAAW,GAAAJ,qBAAA,CAAXI,WAAW;IAAAC,qBAAA,GAiBXtB,MAAM,CAfRuB,cAAc;IACZC,OAAO,GAAAF,qBAAA,CAAPE,OAAO;IACPC,SAAS,GAAAH,qBAAA,CAATG,SAAS;IACTC,OAAO,GAAAJ,qBAAA,CAAPI,OAAO;IACPC,MAAM,GAAAL,qBAAA,CAANK,MAAM;IACNC,SAAS,GAAAN,qBAAA,CAATM,SAAS;IACTC,OAAO,GAAAP,qBAAA,CAAPO,OAAO;IACPC,KAAK,GAAAR,qBAAA,CAALQ,KAAK;IACLC,SAAS,GAAAT,qBAAA,CAATS,SAAS;IACTC,OAAO,GAAAV,qBAAA,CAAPU,OAAO;IACPC,QAAQ,GAAAX,qBAAA,CAARW,QAAQ;IAEVC,iBAAiB,GAGflC,MAAM,CAHRkC,iBAAiB;IACjBC,YAAY,GAEVnC,MAAM,CAFRmC,YAAY;IACZC,SAAS,GACPpC,MAAM,CADRoC,SAAS;IAEXC,mBAAmB,GAAGtD,6BAA6B,CAACiB,MAAM,CAACuB,cAAc,EAAEvC,SAAS,CAAC;EACvF,IAAAsD,qBAAA,GAGIzC,wBAAwB,CAAC;MAC3B0C,QAAQ,EAAEpC,KAAK,CAACoC,QAAQ;MACxB/B,kBAAkB,EAAlBA,kBAAkB;MAClBG,uBAAuB,EAAvBA,uBAAuB;MACvBD,sBAAsB,EAAtBA,sBAAsB;MACtBG,QAAQ,EAARA;IACF,CAAC,CAAC;IARA2B,qBAAqB,GAAAF,qBAAA,CAArBE,qBAAqB;IACrBC,mBAAmB,GAAAH,qBAAA,CAAnBG,mBAAmB;EAQrB,IAAM1B,QAAQ,GAAG9B,KAAK,CAACyD,MAAM,CAAC,IAAI,CAAC;EACnC,IAAMC,SAAS,GAAGvD,UAAU,CAAC0B,YAAY,EAAEC,QAAQ,CAAC;EACpD,IAAM6B,eAAe,GAAG3D,KAAK,CAACyD,MAAM,CAACG,SAAS,CAAC;EAC/C,IAAMC,KAAK,GAAGzD,QAAQ,CAAC,CAAC;EACxB,IAAM0D,KAAK,GAAGD,KAAK,CAACE,SAAS,KAAK,KAAK;EACvC,IAAMC,YAAY,GAAGhE,KAAK,CAACiE,OAAO,CAAC;IAAA,OAAMvD,eAAe,CAACQ,KAAK,CAACoC,QAAQ,EAAEQ,KAAK,CAAC;EAAA,GAAE,CAAC5C,KAAK,CAACoC,QAAQ,EAAEQ,KAAK,CAAC,CAAC;EACzG,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAAS;IACjC,IAAIC,eAAe;IACnB,IAAIjC,QAAQ,EAAE;MACZd,oBAAmB,CAAC,IAAI,CAAC;MACzB;IACF;IACA,IAAMgD,iBAAiB,GAAG,CAACD,eAAe,GAAGrC,QAAQ,CAACuC,OAAO,CAACC,cAAc,KAAK,IAAI,GAAGH,eAAe,GAAG,CAAC;IAC3G,IAAII,gBAAgB;IACpB,IAAIH,iBAAiB,IAAIlD,KAAK,CAACoC,QAAQ,CAAC,CAAC,CAAC,CAACkB,YAAY,EAAE;MACvD;MACAD,gBAAgB,GAAG,CAAC;IACtB,CAAC,MAAM,IAAIH,iBAAiB,IAAIlD,KAAK,CAACoC,QAAQ,CAACpC,KAAK,CAACoC,QAAQ,CAACmB,MAAM,GAAG,CAAC,CAAC,CAACC,UAAU,EAAE;MACpF;MACAH,gBAAgB,GAAG,CAAC;IACtB,CAAC,MAAM;MACLA,gBAAgB,GAAGrD,KAAK,CAACoC,QAAQ,CAACqB,SAAS,CAAC,UAAAC,OAAO;QAAA,OAAIA,OAAO,CAACJ,YAAY,GAAGI,OAAO,CAACC,cAAc,CAACJ,MAAM,GAAGL,iBAAiB;MAAA,EAAC;IAClI;IACA,IAAMU,YAAY,GAAGP,gBAAgB,KAAK,CAAC,CAAC,GAAGrD,KAAK,CAACoC,QAAQ,CAACmB,MAAM,GAAG,CAAC,GAAGF,gBAAgB,GAAG,CAAC;IAC/FnD,oBAAmB,CAAC0D,YAAY,CAAC;EACnC,CAAC;EACD,IAAMC,gBAAgB,GAAG7E,gBAAgB,CAAC,UAAC8E,KAAK,EAAc;IAC5D;IACA;IACA,IAAIA,KAAK,CAACC,kBAAkB,CAAC,CAAC,EAAE;MAC9B;IACF;IAAC,SAAAC,IAAA,GAAAC,SAAA,CAAAV,MAAA,EALkDW,IAAI,OAAAC,KAAA,CAAAH,IAAA,OAAAA,IAAA,WAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;MAAJF,IAAI,CAAAE,IAAA,QAAAH,SAAA,CAAAG,IAAA;IAAA;IAMvD/C,OAAO,IAAI,IAAI,IAAIA,OAAO,CAAAgD,KAAA,UAACP,KAAK,EAAAQ,MAAA,CAAKJ,IAAI,EAAC;IAC1ClB,oBAAoB,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,IAAMuB,kBAAkB,GAAGvF,gBAAgB,CAAC,UAAA8E,KAAK,EAAI;IACnDrC,SAAS,IAAI,IAAI,IAAIA,SAAS,CAACqC,KAAK,CAAC;;IAErC;IACAA,KAAK,CAACU,cAAc,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,IAAMC,gBAAgB,GAAGzF,gBAAgB,CAAC,YAAa;IACrDuC,OAAO,IAAI,IAAI,IAAIA,OAAO,CAAA8C,KAAA,SAAAJ,SAAQ,CAAC;IACnC;IACA,IAAMS,KAAK,GAAG9D,QAAQ,CAACuC,OAAO;IAC9BwB,MAAM,CAACC,YAAY,CAACnC,eAAe,CAACU,OAAO,CAAC;IAC5CV,eAAe,CAACU,OAAO,GAAG0B,UAAU,CAAC,YAAM;MACzC;MACA,IAAI,CAACH,KAAK,IAAIA,KAAK,KAAK9D,QAAQ,CAACuC,OAAO,EAAE;QACxC;MACF;MACA,IAAIlD,sBAAsB,IAAI,IAAI,IAAIe,QAAQ,EAAE;QAC9C;MACF;MACA;MACA;MACA0D,KAAK,CAACI,KAAK,CAACvB,MAAM,IAAIwB,MAAM,CAACL,KAAK,CAACM,YAAY,CAAC,GAAGD,MAAM,CAACL,KAAK,CAACtB,cAAc,CAAC,KAAKsB,KAAK,CAACI,KAAK,CAACvB,MAAM,EAAE;QACtGrD,oBAAmB,CAAC,KAAK,CAAC;MAC5B,CAAC,MAAM;QACL8C,oBAAoB,CAAC,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,IAAMiC,eAAe,GAAGjG,gBAAgB,CAAC,YAAa;IACpDwC,MAAM,IAAI,IAAI,IAAIA,MAAM,CAAA6C,KAAA,SAAAJ,SAAQ,CAAC;IACjC/D,oBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC,CAAC;EACF,IAAMgF,gBAAgB,GAAGlG,gBAAgB,CAAC,UAAA8E,KAAK,EAAI;IACjDpC,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACoC,KAAK,CAAC;IACjC,IAAI9C,QAAQ,EAAE;MACZ8C,KAAK,CAACU,cAAc,CAAC,CAAC;MACtB;IACF;IACA,IAAMW,WAAW,GAAGrB,KAAK,CAACsB,aAAa,CAACC,OAAO,CAAC,MAAM,CAAC;IACvD,IAAIpF,sBAAsB,IAAIA,sBAAsB,CAACqF,UAAU,KAAKrF,sBAAsB,CAACsF,QAAQ,EAAE;MACnG,IAAMC,aAAa,GAAGxF,KAAK,CAACoC,QAAQ,CAACnC,sBAAsB,CAACqF,UAAU,CAAC;MACvE,IAAMG,WAAW,GAAG,aAAa,CAACC,IAAI,CAACP,WAAW,CAAC;MACnD,IAAMQ,UAAU,GAAG,UAAU,CAACD,IAAI,CAACP,WAAW,CAAC;MAC/C,IAAMS,mBAAmB,GAAG,wCAAwC,CAACF,IAAI,CAACP,WAAW,CAAC;MACtF,IAAMU,kBAAkB,GAAGL,aAAa,CAACM,WAAW,KAAK,QAAQ,IAAIL,WAAW,IAAID,aAAa,CAACM,WAAW,KAAK,OAAO,IAAIH,UAAU,IAAIH,aAAa,CAACM,WAAW,KAAK,mBAAmB,IAAIF,mBAAmB;MACnN,IAAIC,kBAAkB,EAAE;QACtB;QACA;MACF;MACA,IAAIJ,WAAW,IAAIE,UAAU,EAAE;QAC7B;QACA;QACA7B,KAAK,CAACU,cAAc,CAAC,CAAC;QACtB;MACF;IACF;IACAV,KAAK,CAACU,cAAc,CAAC,CAAC;IACtBlC,mBAAmB,CAAC,CAAC;IACrBhC,uBAAuB,CAAC6E,WAAW,CAAC;EACtC,CAAC,CAAC;EACF,IAAMY,iBAAiB,GAAG/G,gBAAgB,CAAC,UAAA8E,KAAK,EAAI;IAClD,IAAI9C,QAAQ,EAAE;MACZ;IACF;IACA,IAAMgF,WAAW,GAAGlC,KAAK,CAACmC,MAAM,CAACnB,KAAK;IACtC,IAAMoB,SAAS,GAAGpC,KAAK,CAACqC,WAAW,CAACC,IAAI;IACxC;IACA;IACA,IAAMC,kBAAkB,GAAGH,SAAS,IAAIA,SAAS,CAAC3C,MAAM,GAAG,CAAC;IAC5D,IAAM+C,QAAQ,GAAGD,kBAAkB,GAAGH,SAAS,GAAGF,WAAW;IAC7D,IAAMO,aAAa,GAAGhH,WAAW,CAAC+G,QAAQ,CAAC;;IAE3C;IACA;IACA,IAAIrG,sBAAsB,IAAI,IAAI,IAAIoG,kBAAkB,EAAE;MACxD/F,uBAAuB,CAAC+F,kBAAkB,GAAGH,SAAS,GAAGK,aAAa,CAAC;MACvE;IACF;IACA,IAAIC,UAAU;IACd,IAAIvG,sBAAsB,CAACqF,UAAU,KAAK,CAAC,IAAIrF,sBAAsB,CAACsF,QAAQ,KAAKvF,KAAK,CAACoC,QAAQ,CAACmB,MAAM,GAAG,CAAC,IAAIgD,aAAa,CAAChD,MAAM,KAAK,CAAC,EAAE;MAC1IiD,UAAU,GAAGD,aAAa;IAC5B,CAAC,MAAM;MACL,IAAME,YAAY,GAAGlH,WAAW,CAACwC,iBAAiB,CAAC2E,uBAAuB,CAAC1G,KAAK,CAACoC,QAAQ,EAAEQ,KAAK,CAAC,CAAC;MAClG,IAAI+D,gBAAgB,GAAG,CAAC,CAAC;MACzB,IAAIC,cAAc,GAAG,CAAC,CAAC;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,YAAY,CAAClD,MAAM,EAAEsD,CAAC,IAAI,CAAC,EAAE;QAC/C,IAAIF,gBAAgB,KAAK,CAAC,CAAC,IAAIF,YAAY,CAACI,CAAC,CAAC,KAAKN,aAAa,CAACM,CAAC,CAAC,EAAE;UACnEF,gBAAgB,GAAGE,CAAC;QACtB;QACA,IAAID,cAAc,KAAK,CAAC,CAAC,IAAIH,YAAY,CAACA,YAAY,CAAClD,MAAM,GAAGsD,CAAC,GAAG,CAAC,CAAC,KAAKN,aAAa,CAACA,aAAa,CAAChD,MAAM,GAAGsD,CAAC,GAAG,CAAC,CAAC,EAAE;UACtHD,cAAc,GAAGC,CAAC;QACpB;MACF;MACA,IAAMrB,aAAa,GAAGxF,KAAK,CAACoC,QAAQ,CAACnC,sBAAsB,CAACqF,UAAU,CAAC;MACvE,IAAMwB,6BAA6B,GAAGH,gBAAgB,GAAGnB,aAAa,CAACuB,KAAK,IAAIN,YAAY,CAAClD,MAAM,GAAGqD,cAAc,GAAG,CAAC,GAAGpB,aAAa,CAACwB,GAAG;MAC5I,IAAIF,6BAA6B,EAAE;QACjC;QACA;MACF;;MAEA;MACA,IAAMG,kCAAkC,GAAGV,aAAa,CAAChD,MAAM,GAAGkD,YAAY,CAAClD,MAAM,GAAGiC,aAAa,CAACwB,GAAG,GAAGzH,WAAW,CAACiG,aAAa,CAAC0B,YAAY,IAAI,EAAE,CAAC,CAAC3D,MAAM;MAChKiD,UAAU,GAAGD,aAAa,CAACY,KAAK,CAAC3B,aAAa,CAACuB,KAAK,GAAGxH,WAAW,CAACiG,aAAa,CAAC7B,cAAc,IAAI,EAAE,CAAC,CAACJ,MAAM,EAAE0D,kCAAkC,CAAC;IACpJ;IACA,IAAI3H,SAAS,CAAC,CAAC,IAAIkH,UAAU,CAACjD,MAAM,KAAK,CAAC,EAAE;MAC1ChD,sBAAsB,CAAC+F,QAAQ,CAAC;MAChC;IACF;IACAjE,qBAAqB,CAAC;MACpBmE,UAAU,EAAVA,UAAU;MACV5C,YAAY,EAAE3D,sBAAsB,CAACqF;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,IAAM8B,kBAAkB,GAAGpI,gBAAgB,CAAC,UAAA8E,KAAK,EAAI;IACnDxC,SAAS,IAAI,IAAI,IAAIA,SAAS,CAACwC,KAAK,CAAC;;IAErC;IACA,QAAQ,IAAI;MACV;MACA,KAAKA,KAAK,CAACuD,GAAG,KAAK,GAAG,KAAKvD,KAAK,CAACwD,OAAO,IAAIxD,KAAK,CAACyD,OAAO,CAAC;QACxD;UACE;UACA;UACAzD,KAAK,CAACU,cAAc,CAAC,CAAC;UACtBtE,oBAAmB,CAAC,KAAK,CAAC;UAC1B;QACF;;MAEF;MACA,KAAK4D,KAAK,CAACuD,GAAG,KAAK,YAAY;QAC7B;UACEvD,KAAK,CAACU,cAAc,CAAC,CAAC;UACtB,IAAIvE,sBAAsB,IAAI,IAAI,EAAE;YAClCC,oBAAmB,CAAC4C,YAAY,CAACwC,UAAU,CAAC;UAC9C,CAAC,MAAM,IAAIrF,sBAAsB,CAACqF,UAAU,KAAKrF,sBAAsB,CAACsF,QAAQ,EAAE;YAChFrF,oBAAmB,CAACD,sBAAsB,CAACsF,QAAQ,CAAC;UACtD,CAAC,MAAM;YACL,IAAMlC,gBAAgB,GAAGP,YAAY,CAAC0E,SAAS,CAACvH,sBAAsB,CAACqF,UAAU,CAAC,CAACmC,UAAU;YAC7F,IAAIpE,gBAAgB,KAAK,IAAI,EAAE;cAC7BnD,oBAAmB,CAACmD,gBAAgB,CAAC;YACvC;UACF;UACA;QACF;;MAEF;MACA,KAAKS,KAAK,CAACuD,GAAG,KAAK,WAAW;QAC5B;UACEvD,KAAK,CAACU,cAAc,CAAC,CAAC;UACtB,IAAIvE,sBAAsB,IAAI,IAAI,EAAE;YAClCC,oBAAmB,CAAC4C,YAAY,CAACyC,QAAQ,CAAC;UAC5C,CAAC,MAAM,IAAItF,sBAAsB,CAACqF,UAAU,KAAKrF,sBAAsB,CAACsF,QAAQ,EAAE;YAChFrF,oBAAmB,CAACD,sBAAsB,CAACqF,UAAU,CAAC;UACxD,CAAC,MAAM;YACL,IAAMjC,iBAAgB,GAAGP,YAAY,CAAC0E,SAAS,CAACvH,sBAAsB,CAACqF,UAAU,CAAC,CAACoC,SAAS;YAC5F,IAAIrE,iBAAgB,KAAK,IAAI,EAAE;cAC7BnD,oBAAmB,CAACmD,iBAAgB,CAAC;YACvC;UACF;UACA;QACF;;MAEF;MACA,KAAK,CAAC,WAAW,EAAE,QAAQ,CAAC,CAACsE,QAAQ,CAAC7D,KAAK,CAACuD,GAAG,CAAC;QAC9C;UACEvD,KAAK,CAACU,cAAc,CAAC,CAAC;UACtB,IAAIxD,QAAQ,EAAE;YACZ;UACF;UACA,IAAIf,sBAAsB,IAAI,IAAI,IAAIA,sBAAsB,CAACqF,UAAU,KAAK,CAAC,IAAIrF,sBAAsB,CAACsF,QAAQ,KAAKvF,KAAK,CAACoC,QAAQ,CAACmB,MAAM,GAAG,CAAC,EAAE;YAC9IpD,UAAU,CAAC,CAAC;UACd,CAAC,MAAM;YACLC,kBAAkB,CAAC,CAAC;UACtB;UACAkC,mBAAmB,CAAC,CAAC;UACrB;QACF;;MAEF;MACA,KAAK,CAAC,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAACqF,QAAQ,CAAC7D,KAAK,CAACuD,GAAG,CAAC;QACpF;UACEvD,KAAK,CAACU,cAAc,CAAC,CAAC;UACtB,IAAIxD,QAAQ,IAAIf,sBAAsB,IAAI,IAAI,EAAE;YAC9C;UACF;UACA,IAAMuF,aAAa,GAAGxF,KAAK,CAACoC,QAAQ,CAACnC,sBAAsB,CAACqF,UAAU,CAAC;UACvE,IAAMsC,iBAAiB,GAAG7F,iBAAiB,CAAC8F,oBAAoB,CAAC/H,KAAK,EAAEE,KAAK,EAAEwF,aAAa,CAAC;UAC7F,IAAMsC,eAAe,GAAGzI,kBAAkB,CAACS,KAAK,EAAEY,QAAQ,EAAE8E,aAAa,EAAE1B,KAAK,CAACuD,GAAG,EAAE7G,uBAAuB,EAAEoH,iBAAiB,CAACG,IAAI,EAAE;YACrI7G,WAAW,EAAXA;UACF,CAAC,CAAC;UACFb,kBAAkB,CAAC;YACjBmF,aAAa,EAAbA,aAAa;YACbsC,eAAe,EAAfA,eAAe;YACfE,qBAAqB,EAAE;UACzB,CAAC,CAAC;UACF;QACF;IACJ;EACF,CAAC,CAAC;EACFjJ,iBAAiB,CAAC,YAAM;IACtB,IAAI,CAAC6B,QAAQ,CAACuC,OAAO,EAAE;MACrB;IACF;IACA,IAAIlD,sBAAsB,IAAI,IAAI,EAAE;MAClC,IAAIW,QAAQ,CAACuC,OAAO,CAAC8E,UAAU,EAAE;QAC/B;QACA;QACA;QACArH,QAAQ,CAACuC,OAAO,CAAC8E,UAAU,GAAG,CAAC;MACjC;MACA;IACF;IACA,IAAMC,oBAAoB,GAAGlI,KAAK,CAACoC,QAAQ,CAACnC,sBAAsB,CAACqF,UAAU,CAAC;IAC9E,IAAM6C,mBAAmB,GAAGnI,KAAK,CAACoC,QAAQ,CAACnC,sBAAsB,CAACsF,QAAQ,CAAC;IAC3E,IAAInC,cAAc,GAAG8E,oBAAoB,CAAC5E,YAAY;IACtD,IAAI0B,YAAY,GAAGmD,mBAAmB,CAAC3E,UAAU;IACjD,IAAIvD,sBAAsB,CAACmI,6BAA6B,EAAE;MACxDhF,cAAc,IAAI8E,oBAAoB,CAACvE,cAAc,CAACJ,MAAM;MAC5DyB,YAAY,IAAImD,mBAAmB,CAACjB,YAAY,CAAC3D,MAAM;IACzD;IACA,IAAIH,cAAc,KAAKxC,QAAQ,CAACuC,OAAO,CAACC,cAAc,IAAI4B,YAAY,KAAKpE,QAAQ,CAACuC,OAAO,CAAC6B,YAAY,EAAE;MACxG;MACA,IAAMqD,gBAAgB,GAAGzH,QAAQ,CAACuC,OAAO,CAACmF,SAAS;MACnD;MACA;MACA;MACA,IAAI1H,QAAQ,CAACuC,OAAO,KAAKxD,gBAAgB,CAAC4I,QAAQ,CAAC,EAAE;QACnD3H,QAAQ,CAACuC,OAAO,CAACqF,iBAAiB,CAACpF,cAAc,EAAE4B,YAAY,CAAC;MAClE;MACA;MACApE,QAAQ,CAACuC,OAAO,CAACmF,SAAS,GAAGD,gBAAgB;IAC/C;EACF,CAAC,CAAC;EACF,IAAMI,eAAe,GAAGtJ,aAAa,CAACR,QAAQ,CAAC,CAAC,CAAC,EAAEkC,aAAa,EAAE;IAChEiE,KAAK,EAAE9E,KAAK,CAAC8E,KAAK;IAClBpE,QAAQ,EAARA;EACF,CAAC,CAAC,EAAEuB,SAAS,EAAED,YAAY,CAAC0G,WAAW,EAAE1G,YAAY,CAAC2G,iBAAiB,CAAC;EACxE,IAAMC,UAAU,GAAG9J,KAAK,CAACiE,OAAO,CAAC,YAAM;IACrC;IACA;IACA,IAAIpB,KAAK,KAAKe,SAAS,EAAE;MACvB,OAAOf,KAAK;IACd;IACA,OAAOK,YAAY,CAAC6G,QAAQ,CAACJ,eAAe,CAAC;EAC/C,CAAC,EAAE,CAACzG,YAAY,EAAEyG,eAAe,EAAE9G,KAAK,CAAC,CAAC;EAC1C7C,KAAK,CAACgK,SAAS,CAAC,YAAM;IACpB,IAAI,CAACF,UAAU,IAAI,CAAC3I,sBAAsB,EAAE;MAC1CqC,mBAAmB,CAAC,CAAC;IACvB;EACF,CAAC,EAAE,CAACtC,KAAK,CAAC+I,cAAc,EAAE9I,sBAAsB,EAAE2I,UAAU,CAAC,CAAC,CAAC,CAAC;;EAEhE9J,KAAK,CAACgK,SAAS,CAAC,YAAM;IACpB;IACA,IAAIlI,QAAQ,CAACuC,OAAO,IAAIvC,QAAQ,CAACuC,OAAO,KAAKoF,QAAQ,CAACS,aAAa,EAAE;MACnE9I,oBAAmB,CAAC,KAAK,CAAC;IAC5B;IACA,OAAO;MAAA,OAAMyE,MAAM,CAACC,YAAY,CAACnC,eAAe,CAACU,OAAO,CAAC;IAAA;EAC3D,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA;EACA;EACA;EACArE,KAAK,CAACgK,SAAS,CAAC,YAAM;IACpB,IAAI9I,KAAK,CAACiJ,mBAAmB,IAAI,IAAI,IAAIhJ,sBAAsB,IAAI,IAAI,EAAE;MACvEqC,mBAAmB,CAAC,CAAC;MACrBlC,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACJ,KAAK,CAACiJ,mBAAmB,CAAC,CAAC,CAAC,CAAC;;EAEjC,IAAM3C,QAAQ,GAAGxH,KAAK,CAACiE,OAAO,CAAC,YAAM;IACnC,IAAImG,qBAAqB;IACzB,OAAO,CAACA,qBAAqB,GAAGlJ,KAAK,CAACiJ,mBAAmB,KAAK,IAAI,GAAGC,qBAAqB,GAAGnH,iBAAiB,CAAC2E,uBAAuB,CAAC1G,KAAK,CAACoC,QAAQ,EAAEQ,KAAK,CAAC;EAC/J,CAAC,EAAE,CAAC5C,KAAK,CAACoC,QAAQ,EAAEL,iBAAiB,EAAE/B,KAAK,CAACiJ,mBAAmB,EAAErG,KAAK,CAAC,CAAC;EACzE,IAAMuG,SAAS,GAAGrK,KAAK,CAACiE,OAAO,CAAC,YAAM;IACpC,IAAI9C,sBAAsB,IAAI,IAAI,EAAE;MAClC,OAAO,MAAM;IACf;IACA,IAAID,KAAK,CAACoC,QAAQ,CAACnC,sBAAsB,CAACqF,UAAU,CAAC,CAACQ,WAAW,KAAK,QAAQ,EAAE;MAC9E,OAAO,MAAM;IACf;IACA,OAAO,SAAS;EAClB,CAAC,EAAE,CAAC7F,sBAAsB,EAAED,KAAK,CAACoC,QAAQ,CAAC,CAAC;EAC5C,IAAMgH,aAAa,GAAGxI,QAAQ,CAACuC,OAAO,IAAIvC,QAAQ,CAACuC,OAAO,KAAKxD,gBAAgB,CAAC4I,QAAQ,CAAC;EACzF,IAAMc,mBAAmB,GAAGrH,YAAY,CAACsH,cAAc,CAACxJ,KAAK,EAAEE,KAAK,CAAC8E,KAAK,EAAE9C,YAAY,CAACuH,UAAU,CAAC;EACpG,IAAMC,qBAAqB,GAAG,CAACJ,aAAa,IAAIC,mBAAmB;EACnEvK,KAAK,CAAC2K,mBAAmB,CAACxI,gBAAgB,EAAE;IAAA,OAAO;MACjDyI,WAAW,EAAE,SAAAA,YAAA;QAAA,OAAM1J,KAAK,CAACoC,QAAQ;MAAA;MACjCuH,qBAAqB,EAAE,SAAAA,sBAAA,EAAM;QAC3B,IAAIC,gBAAgB,EAAEC,aAAa;QACnC,IAAM3G,iBAAiB,GAAG,CAAC0G,gBAAgB,GAAGhJ,QAAQ,CAACuC,OAAO,CAACC,cAAc,KAAK,IAAI,GAAGwG,gBAAgB,GAAG,CAAC;QAC7G,IAAME,eAAe,GAAG,CAACD,aAAa,GAAGjJ,QAAQ,CAACuC,OAAO,CAAC6B,YAAY,KAAK,IAAI,GAAG6E,aAAa,GAAG,CAAC;QACnG,IAAI3G,iBAAiB,KAAK,CAAC,IAAI4G,eAAe,KAAK,CAAC,EAAE;UACpD,OAAO,IAAI;QACb;QACA,IAAMzG,gBAAgB,GAAGH,iBAAiB,IAAIlD,KAAK,CAACoC,QAAQ,CAAC,CAAC,CAAC,CAACkB,YAAY,GAAG,CAAC,CAAC;QAAA,EAC/EtD,KAAK,CAACoC,QAAQ,CAACqB,SAAS,CAAC,UAAAC,OAAO;UAAA,OAAIA,OAAO,CAACJ,YAAY,GAAGI,OAAO,CAACC,cAAc,CAACJ,MAAM,GAAGL,iBAAiB;QAAA,EAAC;QAC/G,OAAOG,gBAAgB,KAAK,CAAC,CAAC,GAAGrD,KAAK,CAACoC,QAAQ,CAACmB,MAAM,GAAG,CAAC,GAAGF,gBAAgB,GAAG,CAAC;MACnF,CAAC;MACDnD,mBAAmB,EAAE,SAAAA,oBAAA6J,kBAAkB;QAAA,OAAI7J,oBAAmB,CAAC6J,kBAAkB,CAAC;MAAA;IACpF,CAAC;EAAA,CAAC,CAAC;EACH,IAAMC,gBAAgB,GAAGhL,gBAAgB,CAAC,UAAC8E,KAAK,EAAc;IAC5D,IAAImG,iBAAiB;IACrBnG,KAAK,CAACU,cAAc,CAAC,CAAC;IAAC,SAAA0F,KAAA,GAAAjG,SAAA,CAAAV,MAAA,EAF4BW,IAAI,OAAAC,KAAA,CAAA+F,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJjG,IAAI,CAAAiG,KAAA,QAAAlG,SAAA,CAAAkG,KAAA;IAAA;IAGvDtI,OAAO,IAAI,IAAI,IAAIA,OAAO,CAAAwC,KAAA,UAACP,KAAK,EAAAQ,MAAA,CAAKJ,IAAI,EAAC;IAC1C/D,UAAU,CAAC,CAAC;IACZS,QAAQ,IAAI,IAAI,IAAI,CAACqJ,iBAAiB,GAAGrJ,QAAQ,CAACuC,OAAO,KAAK,IAAI,IAAI8G,iBAAiB,CAACG,KAAK,CAAC,CAAC;IAC/FlK,oBAAmB,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,OAAOvB,QAAQ,CAAC;IACd8B,WAAW,EAAXA,WAAW;IACX4J,YAAY,EAAE,KAAK;IACnBvI,QAAQ,EAAEwI,OAAO,CAACxI,QAAQ;EAC5B,CAAC,EAAEI,mBAAmB,EAAE;IACtB4C,KAAK,EAAE0E,qBAAqB,GAAG,EAAE,GAAGlD,QAAQ;IAC5C6C,SAAS,EAATA,SAAS;IACTnI,QAAQ,EAARA,QAAQ;IACRK,OAAO,EAAEwC,gBAAgB;IACzBtC,OAAO,EAAEkD,gBAAgB;IACzBjD,MAAM,EAAEyD,eAAe;IACvBvD,OAAO,EAAEwD,gBAAgB;IACzBqF,QAAQ,EAAExE,iBAAiB;IAC3BzE,SAAS,EAAE8F,kBAAkB;IAC7B3F,SAAS,EAAE8C,kBAAkB;IAC7B1C,OAAO,EAAEmI,gBAAgB;IACzBrI,KAAK,EAAEiH,UAAU;IACjB4B,GAAG,EAAEhI,SAAS;IACdZ,SAAS,EAAE0I,OAAO,CAAC1I,SAAS,IAAI,CAACyH,mBAAmB,IAAI,CAACrI,QAAQ,IAAI,CAACc,QAAQ;EAChF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}