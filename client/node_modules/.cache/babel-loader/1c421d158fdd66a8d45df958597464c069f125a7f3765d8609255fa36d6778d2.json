{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nconst useSignup = () => {\n  _s();\n  const [iserror, setError] = useState(null);\n  const [isloading, setLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthContext();\n  const signups = async (Email, Password) => {\n    setError(null);\n    setLoading(true);\n    const Fetch = await fetch('http://localhost:4000/signup', {\n      method: \"POST\",\n      headers: {\n        \"Context-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        Email,\n        Password\n      })\n    });\n    const JsonData = await Fetch.json();\n    console.log(JsonData);\n    if (!Fetch.ok) {\n      // Handle the Error because if the user is not available\n      setLoading(false);\n      setError(JsonData.Error);\n    } else {\n      // Save the user to localStorage for authendication purpose\n      setLoading(false);\n      localStorage.setItem('User', JSON.stringify(JsonData));\n      dispatch({\n        type: \"Login\",\n        payload: JsonData\n      });\n    }\n  };\n  return {\n    signups,\n    isloading,\n    iserror\n  };\n};\n_s(useSignup, \"+xp8tpdp6f6lH9TiVdou+G1N4H4=\", false, function () {\n  return [useAuthContext];\n});\nexport default useSignup;","map":{"version":3,"names":["useContext","useState","useAuthContext","useSignup","_s","iserror","setError","isloading","setLoading","dispatch","signups","Email","Password","Fetch","fetch","method","headers","body","JSON","stringify","JsonData","json","console","log","ok","Error","localStorage","setItem","type","payload"],"sources":["C:/NewPrac/Prac/client/src/hooks/useSignup.js"],"sourcesContent":["import { useContext, useState } from 'react';\r\nimport { useAuthContext } from './useAuthContext';\r\n\r\n\r\nconst useSignup = () => {\r\n    const [ iserror, setError ] = useState(null);\r\n    const [ isloading, setLoading ] = useState(null);\r\n    const { dispatch } = useAuthContext();\r\n\r\n    const signups = async ( Email, Password ) => {\r\n        setError(null);\r\n        setLoading(true);\r\n        const Fetch = await fetch('http://localhost:4000/signup', {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Context-Type\" : \"application/json\"\r\n            },\r\n            body:JSON.stringify({ Email, Password })\r\n        });\r\n\r\n        const JsonData = await Fetch.json();\r\n        console.log(JsonData);\r\n        if(!Fetch.ok){\r\n            // Handle the Error because if the user is not available\r\n            setLoading(false);\r\n            setError(JsonData.Error);\r\n        }\r\n        else{\r\n             // Save the user to localStorage for authendication purpose\r\n            setLoading(false);\r\n            localStorage.setItem('User', JSON.stringify(JsonData));\r\n            dispatch({ type: \"Login\", payload : JsonData })\r\n        }\r\n    }\r\n    return { signups, isloading, iserror }\r\n}\r\n\r\nexport default useSignup;"],"mappings":";AAAA,SAASA,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,SAASC,cAAc,QAAQ,kBAAkB;AAGjD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAAEC,OAAO,EAAEC,QAAQ,CAAE,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAEM,SAAS,EAAEC,UAAU,CAAE,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAEQ;EAAS,CAAC,GAAGP,cAAc,CAAC,CAAC;EAErC,MAAMQ,OAAO,GAAG,MAAAA,CAAQC,KAAK,EAAEC,QAAQ,KAAM;IACzCN,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMK,KAAK,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MACtDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAG;MACrB,CAAC;MACDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC3C,CAAC,CAAC;IAEF,MAAMQ,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,CAAC;IACnCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,IAAG,CAACP,KAAK,CAACW,EAAE,EAAC;MACT;MACAhB,UAAU,CAAC,KAAK,CAAC;MACjBF,QAAQ,CAACc,QAAQ,CAACK,KAAK,CAAC;IAC5B,CAAC,MACG;MACC;MACDjB,UAAU,CAAC,KAAK,CAAC;MACjBkB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAET,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;MACtDX,QAAQ,CAAC;QAAEmB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAGT;MAAS,CAAC,CAAC;IACnD;EACJ,CAAC;EACD,OAAO;IAAEV,OAAO;IAAEH,SAAS;IAAEF;EAAQ,CAAC;AAC1C,CAAC;AAAAD,EAAA,CA/BKD,SAAS;EAAA,QAGUD,cAAc;AAAA;AA8BvC,eAAeC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}