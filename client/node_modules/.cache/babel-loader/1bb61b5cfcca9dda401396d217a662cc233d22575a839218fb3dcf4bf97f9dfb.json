{"ast":null,"code":"import _toConsumableArray from \"C:/NewPrac/Prac/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nexport var SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport var getSectionTypeGranularity = function getSectionTypeGranularity(sections) {\n  return Math.max.apply(Math, _toConsumableArray(sections.map(function (section) {\n    var _SECTION_TYPE_GRANULA;\n    return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;\n  })));\n};\nexport var getViewsGranularity = function getViewsGranularity(views) {\n  return Math.max.apply(Math, _toConsumableArray(views.map(function (view) {\n    var _SECTION_TYPE_GRANULA2;\n    return (_SECTION_TYPE_GRANULA2 = SECTION_TYPE_GRANULARITY[view]) != null ? _SECTION_TYPE_GRANULA2 : 1;\n  })));\n};\nvar roundDate = function roundDate(utils, granularity, date) {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  }\n\n  // We don't have startOfHour / startOfMinute / startOfSecond\n  var roundedDate = date;\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n  return roundedDate;\n};\nexport var getDefaultReferenceDate = function getDefaultReferenceDate(_ref) {\n  var props = _ref.props,\n    utils = _ref.utils,\n    granularity = _ref.granularity,\n    timezone = _ref.timezone,\n    inGetTodayDate = _ref.getTodayDate;\n  var _props$disableIgnorin;\n  var referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n  var isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n  return referenceDate;\n};","map":{"version":3,"names":["createIsAfterIgnoreDatePart","mergeDateAndTime","getTodayDate","SECTION_TYPE_GRANULARITY","year","month","day","hours","minutes","seconds","milliseconds","getSectionTypeGranularity","sections","Math","max","apply","_toConsumableArray","map","section","_SECTION_TYPE_GRANULA","type","getViewsGranularity","views","view","_SECTION_TYPE_GRANULA2","roundDate","utils","granularity","date","startOfYear","startOfMonth","startOfDay","roundedDate","setMinutes","setSeconds","setMilliseconds","getDefaultReferenceDate","_ref","props","timezone","inGetTodayDate","_props$disableIgnorin","referenceDate","minDate","isAfterDay","maxDate","isBeforeDay","isAfter","disableIgnoringDatePartForTimeValidation","minTime","maxTime"],"sources":["C:/NewPrac/Prac/client/node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.js"],"sourcesContent":["import { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nexport const SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport const getSectionTypeGranularity = sections => Math.max(...sections.map(section => {\n  var _SECTION_TYPE_GRANULA;\n  return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;\n}));\nexport const getViewsGranularity = views => Math.max(...views.map(view => {\n  var _SECTION_TYPE_GRANULA2;\n  return (_SECTION_TYPE_GRANULA2 = SECTION_TYPE_GRANULARITY[view]) != null ? _SECTION_TYPE_GRANULA2 : 1;\n}));\nconst roundDate = (utils, granularity, date) => {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  }\n\n  // We don't have startOfHour / startOfMinute / startOfSecond\n  let roundedDate = date;\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n  return roundedDate;\n};\nexport const getDefaultReferenceDate = ({\n  props,\n  utils,\n  granularity,\n  timezone,\n  getTodayDate: inGetTodayDate\n}) => {\n  var _props$disableIgnorin;\n  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n  const isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n  return referenceDate;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}